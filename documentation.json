{
    "pipes": [
        {
            "name": "FirstParagraphPipe",
            "id": "pipe-FirstParagraphPipe-37cd9b8f893cd87e38b49084bba89cc013c8e8b5177c269c7f5fc5c6ddcb0e0bc2ae2cb70125fe2a0b9cd19388af6ac722b90b619e75643fa92b7f2854eb361c",
            "file": "src/app/shared/pipes/text-fragment.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "firstParagraph",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'firstParagraph'\n})\nexport class FirstParagraphPipe implements PipeTransform {\n\n  transform(text: string): string {\n    if (text == null) {\n      return text;\n    }\n\n    const startLength = 3;\n    const start = text.indexOf('<p>');\n    const end = text.indexOf('</p>');\n\n    if (start === -1 || end === -1) {\n      return text;\n    }\n\n    const fragment = text.substring(start + startLength, end);\n    return fragment;\n  }\n}\n"
        },
        {
            "name": "GetPagePipe",
            "id": "pipe-GetPagePipe-255318b5ca15ac2323a82e299a2800b9c50159589030d71010da67346e06806fd7010ae4e451491fa478d81d1ced34151a2e33924fa49f0818853ef1ffb62633",
            "file": "src/app/shared/pipes/get-page.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "records",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnData",
                            "type": "ColumnDataBase<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementsRange",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RowData[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnData",
                            "type": "ColumnDataBase<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementsRange",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "getPage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { ColumnDataBase, RowData } from '@models/article/tableData';\n\n@Pipe({\n  name: 'getPage'\n})\nexport class GetPagePipe implements PipeTransform {\n\n  transform<T>(\n    records: T[],\n    columnData: ColumnDataBase<T>[],\n    elementsRange: number[]): RowData<T>[] {\n\n    let rows: RowData<T>[] = [];\n\n    elementsRange.forEach(index => {\n      const record = records[index];\n\n      if(record == null){\n        return;\n      }\n      let cells: (string | null)[] = [];\n      columnData.forEach((value) => {\n        const content = value.getCellContent(record);\n        cells.push(content);\n      });\n\n      const row = {\n        index,\n        record,\n        cells\n      }\n\n      rows.push(row);\n    });\n\n    return rows;\n  }\n}\n"
        },
        {
            "name": "RemoveEmptyEntriesPipe",
            "id": "pipe-RemoveEmptyEntriesPipe-7a1c2942aef2b4f37102cd14dc82c6e50489379d67138707bc2d2b28d283af39e998485f58077ccc10d049b66b2c2e2b0b2eb5bfa9e80cddcb6c87dbaac3a1da",
            "file": "src/app/shared/pipes/remove-empty-entries.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "strings",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "strings",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "removeEmptyEntries",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'removeEmptyEntries'\n})\nexport class RemoveEmptyEntriesPipe implements PipeTransform {\n\n  transform(strings: string[]): string[] {\n    return strings.filter(value => value);\n  }\n}\n"
        },
        {
            "name": "UrlAsBackgroundImagePipe",
            "id": "pipe-UrlAsBackgroundImagePipe-a836cab97b0eb4b4deb6d879c3b0c7484244868052f352258aa072227a40e90bda89b2e0f334f6aafc16e1eaed8eb077e14b67786370262d81165084591d34d0",
            "file": "src/app/shared/pipes/url-as-background-image.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "urlAsBackgroundImage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'urlAsBackgroundImage'\n})\nexport class UrlAsBackgroundImagePipe implements PipeTransform {\n\n  transform(url: string): string {\n    return `url('${url}')`;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Article",
            "id": "interface-Article-06d022e1bfb8886b9779acc00053602b17985b684ea9592dc1aa3a8f4db45b7f2a6ab5994ec57c511e16c273661a58035833b1187b789444475d7e91588cce40",
            "file": "src/app/core/backend-models/article.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Image } from './image';\n\nexport interface Article {\n  id: string;\n  title: string;\n\n  email: string;\n  firstname: string;\n  surname: string;\n  author: string;\n  sex: string;\n\n  personal_code: number;\n  phone: string;\n\n  date: number;\n  image: Image;\n  images: Image[];\n  intro: string;\n  body: string;\n  tags: string[];\n\n  boolean: false;\n}\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Image[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "intro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "personal_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArticleList",
            "id": "interface-ArticleList-b6493fad73d65e15b708160e2158436ee4c7c9e8e56bfa15a829f04b3a1f12bb62bd509f443e474988f318a6d05ba4f3fdd07ea2b0fa83ed3a4831e8babf44aa",
            "file": "src/app/core/backend-models/articleList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Article } from './article';\nimport { ListStats } from './listStats';\n\nexport interface ArticleList {\n  stats: ListStats;\n  list: Article[];\n}\n",
            "properties": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Article[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListStats",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BaseResponse",
            "id": "interface-BaseResponse-1284a2369732e4336de77bebfdced27bb79d92b78f7b9d154332678c6c836aeae78e7002af27a7cd051d168e0b2977dcf06f672b2c6bad84fd1ccc00ccdbc5e0",
            "file": "src/app/core/backend-models/baseResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseResponse {\n  success: boolean;\n  message: string | null;\n}\n\nexport interface ValueResponse<T> extends BaseResponse {\n  value: T | null;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Image",
            "id": "interface-Image-e34ae67e75b2049f3d8776e0e4a3e95501dae085af773fafd866d0d6a68357665cb72799ba3bd2b9606ef4b2da3c7f4777838188e7fe962c7b27a88068470742",
            "file": "src/app/core/backend-models/image.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Image {\n  large: string;\n  medium: string;\n  small: string;\n  title: string;\n  alt: string;\n}\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ListStats",
            "id": "interface-ListStats-b99109f99f8fec52f528ddfe62836f9c5a3e111f1b87bd0be3aed976560c2d0bfd46a901b534133a553cf9318d69a9c716b29214eeeabb4ce87be2096d4d6a95",
            "file": "src/app/core/backend-models/listStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListStats {\n  total: number;\n  result: number;\n  offset: number;\n  limit: number;\n}\n",
            "properties": [
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RowData",
            "id": "interface-RowData-b44035f8338a2aef7cce1ade2cd199e1acbcc4b15095ae705e3eb585738fa73712052b903d9a05e9b2832d612fa63b2df84d3fdfe283a6193d08cde5626d7159",
            "file": "src/app/core/models/article/tableData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { SortingOrder } from '@enums/sortingType';\nimport { CompareFunction, GetProperty } from '@shared/utilities/sorting';\nimport {\n  SortingOrderChangeMap,\n  SortingOrderIconMap\n} from '@shared/utilities/sorting-map';\n\nexport interface RowData<T> {\n  index: number;\n  record: T;\n  cells: (string | null)[];\n}\n\nexport class ColumnView {\n  id: Guid;\n  icon: string | null;\n  sortingOrder: SortingOrder;\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  constructor(id: Guid,\n    icon: string | null,\n    sortingOrder: SortingOrder,\n    title: string,\n    nonSortable: boolean,\n    widthPercentage: number | null) {\n    this.id = id;\n    this.icon = icon;\n    this.sortingOrder = sortingOrder;\n    this.title = title;\n    this.nonSortable = nonSortable;\n    this.widthPercentage = widthPercentage;\n\n  }\n}\n\nexport abstract class ColumnDataBase<T> {\n  abstract id: Guid;\n  abstract icon: string | null;\n  abstract sortingOrder: SortingOrder | null;\n\n  abstract title: string;\n  abstract nonSortable: boolean;\n  abstract widthPercentage: number | null;\n\n  abstract getCellContent: GetProperty<T, string>;\n  abstract compareFunction: CompareFunction<T> | null;\n\n  abstract switchSortingOrder(): void;\n  abstract setSortingToDefault(): void;\n\n  abstract getView(): ColumnView;\n}\n\nexport class ColumnData<T> implements ColumnDataBase<T>{\n  private _id: Guid;\n  private _sortingOrder: SortingOrder;\n  private _icon: string | null;\n\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  getCellContent: GetProperty<T, string>;\n  compareFunction: CompareFunction<T> | null;\n\n  public get id(): Guid {\n    return this._id;\n  }\n\n  icon: string | null;\n\n  public get sortingOrder(): SortingOrder {\n    return this._sortingOrder;\n  }\n\n  constructor(\n    title: string,\n    widthPercentage: number | null = null,\n    nonSortable: boolean = false,\n    getCellContent: GetProperty<T, string>,\n    compareFunction: CompareFunction<T> | null = null) {\n\n    this._id = Guid.create();\n    this.title = title;\n    this.widthPercentage = widthPercentage;\n    this.nonSortable = nonSortable;\n    this.getCellContent = getCellContent;\n    this.compareFunction = compareFunction;\n\n    if (nonSortable) {\n      this._sortingOrder = SortingOrder.None;\n    } else {\n      this._sortingOrder = SortingOrder.Default;\n    }\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) ?? null;\n    this.icon = this._icon;\n  }\n\n  switchSortingOrder(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n\n    this._sortingOrder =\n      SortingOrderChangeMap.get(this._sortingOrder) || SortingOrder.None;\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) || null;\n    this.icon = this._icon;\n  }\n\n  setSortingToDefault(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n    this._sortingOrder = SortingOrder.Default;\n    this._icon = SortingOrderIconMap.get(SortingOrder.Default) || null;;\n    this.icon = this._icon;\n  }\n\n  getView = (): ColumnView => ({\n    id: this._id,\n    sortingOrder: this._sortingOrder,\n    title: this.title,\n    icon: this._icon,\n    nonSortable: this.nonSortable,\n    widthPercentage: this.widthPercentage\n  });\n}\n",
            "properties": [
                {
                    "name": "cells",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | null)[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "record",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidatedResponse",
            "id": "interface-ValidatedResponse-9bf793034a24f3bfb8725a36c66865c83bf546c1a9c5214e70e7de75ffd15be9cf2083d559c2b7100b36ed02d0638e60a7302b1c84fef84ad4375a278cb37a85",
            "file": "src/app/core/backend-models/validatedResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidationError } from './validationError';\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n}\n\nexport interface ValidatedResponse<T> {\n  value: T | null;\n  validationResult: ValidationResult;\n}\n",
            "properties": [
                {
                    "name": "validationResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationResult",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidationResult",
            "id": "interface-ValidationResult-9bf793034a24f3bfb8725a36c66865c83bf546c1a9c5214e70e7de75ffd15be9cf2083d559c2b7100b36ed02d0638e60a7302b1c84fef84ad4375a278cb37a85",
            "file": "src/app/core/backend-models/validatedResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidationError } from './validationError';\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n}\n\nexport interface ValidatedResponse<T> {\n  value: T | null;\n  validationResult: ValidationResult;\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationError[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValueResponse",
            "id": "interface-ValueResponse-1284a2369732e4336de77bebfdced27bb79d92b78f7b9d154332678c6c836aeae78e7002af27a7cd051d168e0b2977dcf06f672b2c6bad84fd1ccc00ccdbc5e0",
            "file": "src/app/core/backend-models/baseResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseResponse {\n  success: boolean;\n  message: string | null;\n}\n\nexport interface ValueResponse<T> extends BaseResponse {\n  value: T | null;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BaseResponse"
        }
    ],
    "injectables": [
        {
            "name": "ArticleService",
            "id": "injectable-ArticleService-f25677de6565042164b683fe2963a46418c4d033a0a29e2854c4fc36d38d88d308abf325f54d57d410c9bec2b77d0f1d4778131d5a8b2544f32ec957253ce57f",
            "file": "src/app/core/services/article/article.service.ts",
            "properties": [
                {
                    "name": "handleError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getArticle",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Article>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getArticleList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ArticleList>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getArticleListWithLimit",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ArticleList>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpDelete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpGet",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPut",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ApiConfiguration,\n  AppConfiguration,\n  RuntimeConfiguration,\n  TimeoutConfiguration\n} from 'src/app/core/models/appConfiguration';\nimport { Article } from 'src/app/core/backend-models/article';\nimport { ArticleHandler } from '@services/abstract/articleHandler';\nimport { ArticleList } from 'src/app/core/backend-models/articleList';\nimport { HttpBaseService } from '@services/http-base.service';\nimport { Logging } from '@services/abstract/logging';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArticleService extends HttpBaseService implements ArticleHandler {\n\n  constructor(\n    private httpClient: HttpClient,\n    private appConfig: AppConfiguration,\n    private runtime: RuntimeConfiguration,\n    private timeoutConfig: TimeoutConfiguration,\n    private apiPaths: ApiConfiguration,\n    private logger: Logging) {\n    super(httpClient, logger, timeoutConfig);\n  }\n\n  public getArticle(id: string | null): Observable<Article> {\n    const articleId = id ?? this.appConfig.article.defaultArticleId;\n\n    const base = this.runtime.apiBaseUrl;\n    const url = `${base}${this.apiPaths.articleUrl}/${articleId}`;\n\n    return this.httpGet(url);\n  };\n\n  public getArticleList(): Observable<ArticleList> {\n    const limit = this.appConfig.article.defaultListLimit;\n    return this.getArticleListWithLimit(limit);\n  };\n\n  public getArticleListWithLimit(limit: number): Observable<ArticleList> {\n    const base = this.runtime.apiBaseUrl;\n    const url = `${base}${this.apiPaths.articleUrl}`;\n\n    let params = new HttpParams().set('limit', limit);\n    return this.httpGet(url, params);\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpBaseService",
            "type": "injectable"
        },
        {
            "name": "ConfigurationService",
            "id": "injectable-ConfigurationService-189f4762228f85e369cb4432a5968c1657da5ba3e37d8f7f90712192f8f134e683aefb7214aafe709feb61ee57e4f946a739d912ffa460631e3543e0a4f70b9c",
            "file": "src/app/core/services/app-configuration.service.ts",
            "properties": [
                {
                    "name": "config",
                    "defaultValue": "{\n    apiBaseUrl: '',\n    logLevel: LogLevel.All\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuntimeConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "getConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "RuntimeConfiguration",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { map, Observable } from 'rxjs';\n\nimport { RuntimeConfiguration } from '@models/appConfiguration';\nimport { LogLevel } from '@enums/logLevel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  private config: RuntimeConfiguration = {\n    apiBaseUrl: '',\n    logLevel: LogLevel.All\n  };\n\n  loaded = false;\n\n  constructor(private http: HttpClient) { }\n\n  loadConfig(): Observable<void> {\n    return this.http\n      .get<RuntimeConfiguration>('/assets/app.config.json')\n      .pipe(\n        map(data => {\n          this.config = data;\n          this.loaded = true;\n        })\n      );\n  }\n\n  getConfig(): RuntimeConfiguration {\n    return this.config;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LayoutService",
            "id": "injectable-LayoutService-e348a504948704926f6d0b8681acb13085a73cd715ef1bbabc99bbf4058cfa964d699666005a6e0a1d4c6a3aebae67c078ff1986e27109a21b0c68e1e5528c57",
            "file": "src/app/core/services/layout.service.ts",
            "properties": [
                {
                    "name": "closeMenu",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "menuToggled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "menuVisibleStream",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LayoutService {\n  private menuVisibleStream = new BehaviorSubject(false);\n\n  public get menuVisible() {\n    return this.menuVisibleStream.asObservable();\n  }\n\n  menuToggled = () =>\n    this.menuVisibleStream.next(!this.menuVisibleStream.value);\n\n  closeMenu = () =>\n    this.menuVisibleStream.next(false);\n}\n",
            "accessors": {
                "menuVisible": {
                    "name": "menuVisible",
                    "getSignature": {
                        "name": "menuVisible",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "LoggingService",
            "id": "injectable-LoggingService-50ae26680ba560f4e1acf4130c265dfbbfb9d53d213c76cc80cdc1a81d02a2dc85cf20ce6522b018934bf58b74242421b5d61dede61e53d500513bbb6ea105d8",
            "file": "src/app/core/services/logging.service.ts",
            "properties": [
                {
                    "name": "debug",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "error",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fatal",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "info",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "logToConsole",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "trace",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "traceObject",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "warn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "LogLevel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "LogLevel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logTrace",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { LogLevel } from '@enums/logLevel';\nimport { RuntimeConfiguration } from 'src/app/core/models/appConfiguration';\n\nimport { Logging } from './abstract/logging';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggingService implements Logging {\n\n  constructor(private configuration: RuntimeConfiguration) { }\n\n  trace = (message: string) => this.log(message, LogLevel.Trace);\n  debug = (message: string) => this.log(message, LogLevel.Debug);\n  info = (message: string) => this.log(message, LogLevel.Information);\n  warn = (message: string) => this.log(message, LogLevel.Warning);\n  error = (message: string, error?: Error) =>\n    this.log(message, LogLevel.Error, error);\n  fatal = (message: string, error?: Error) =>\n    this.log(message, LogLevel.Fatal, error);\n\n  traceObject = (value: unknown) => this.logTrace(value);\n\n  private log(message: string, level: LogLevel, error?: Error) {\n    if (level < this.configuration.logLevel) {\n      return;\n    }\n    this.logToConsole(message, level, error);\n  }\n\n  private logTrace(value: unknown) {\n    if (LogLevel.Trace < this.configuration.logLevel) {\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.trace(value);\n  }\n\n  private logToConsole = (message: string, level: LogLevel, error?: Error) => {\n    if (level < this.configuration.logLevel || level === LogLevel.Off) {\n      return;\n    }\n\n    switch (level) {\n      /* eslint-disable no-console */\n      case LogLevel.Trace: return console.trace(message);\n      case LogLevel.Debug: return console.debug(message);\n      case LogLevel.Information: return console.info(message);\n      case LogLevel.Warning: return console.warn(message);\n      case LogLevel.Error:\n      case LogLevel.Fatal:\n        console.error(message);\n        if (error) {\n          console.error(error);\n        }\n        return;\n      default: return console.log(message);\n      /* eslint-enable no-console */\n    }\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configuration",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "configuration",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OperationCategoryService",
            "id": "injectable-OperationCategoryService-d8dfe9cc60850a973649a69756e406d45bad755d2cbbc0e9c37ae1694b07fc8373c9bc061419bffd00c8fc73e2d2693e16e31ee62e475f9f907d2e37337ea2a8",
            "file": "src/app/core/services/finance/operation-category.service.ts",
            "properties": [
                {
                    "name": "apiPath",
                    "defaultValue": "this.apiConfiguration.operationCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "handleError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BaseResponse>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T[]>>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "request",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryService"
                    }
                },
                {
                    "name": "httpDelete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpGet",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPut",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport {\n  AuditableOperationCategory,\n  OperationCategory,\n  OperationCategoryRequest\n} from '@backend-models/finance/operationCategory';\nimport {\n  ApiConfiguration,\n  AppConfiguration,\n  RuntimeConfiguration,\n  TimeoutConfiguration\n} from '@models/appConfiguration';\nimport { Logging } from '@services/abstract/logging';\nimport {\n  OperationCategoryHandler\n} from '@services/abstract/operationCategoryHandler';\nimport { RepositoryService } from '@services/repository.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OperationCategoryService\n  extends RepositoryService\n  <AuditableOperationCategory,\n    OperationCategory,\n    OperationCategoryRequest>\n\n  implements OperationCategoryHandler {\n\n  apiPath: string = this.apiConfiguration.operationCategory;\n\n  constructor(\n    httpClient: HttpClient,\n    appConfig: AppConfiguration,\n    runtime: RuntimeConfiguration,\n    timeoutConfig: TimeoutConfiguration,\n    apiPaths: ApiConfiguration,\n    logger: Logging,\n    private apiConfiguration: ApiConfiguration) {\n\n    super(httpClient, appConfig, runtime, timeoutConfig, logger);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiConfiguration",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiConfiguration",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "RepositoryService",
            "type": "injectable"
        },
        {
            "name": "OperationCategoryServiceMock",
            "id": "injectable-OperationCategoryServiceMock-e3619f994c15765d63bc20b46b701408a79e8561a7ba369688ea37304dd4c17c153d7a1eca4dec58b647a1f9ed00707a6133ddbb137de12cf3c5edde12f08009",
            "file": "src/app/shared/mocks/services/operation-category.mock.service.ts",
            "properties": [
                {
                    "name": "apiPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        126,
                        144
                    ]
                },
                {
                    "name": "elements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuditableOperationCategory[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<AuditableOperationCategory>>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BaseResponse>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<[] | null>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<AuditableOperationCategory | null>>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "update",
                            "type": "OperationCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<AuditableOperationCategory>>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "OperationCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpDelete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpGet",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPut",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Guid } from 'guid-typescript';\nimport { Observable, of } from 'rxjs';\n\nimport { BaseResponse, ValueResponse } from '@backend-models/baseResponse';\nimport { ValidatedResponse } from '@backend-models/validatedResponse';\nimport {\n  AppConfiguration,\n  RuntimeConfiguration,\n  TimeoutConfiguration\n} from '@models/appConfiguration';\nimport { Logging } from '@services/abstract/logging';\nimport { RepositoryHandler } from '@services/abstract/repositoryHandler';\nimport { HttpBaseService } from '@services/http-base.service';\nimport {\n  AuditableOperationCategory,\n  OperationCategory,\n  OperationCategoryRequest\n} from '@backend-models/finance/operationCategory';\nimport {\n  getOperationCategoryArrayMock,\n  getOperationCategoryByRequestMock,\n  getOperationCategoryMock\n} from '../operation-category';\nimport {\n  wrapToValidatedResponse,\n  wrapToValueResponse\n} from '../responses';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class OperationCategoryServiceMock\n  extends HttpBaseService\n  implements RepositoryHandler\n  <AuditableOperationCategory, OperationCategory, OperationCategoryRequest> {\n\n  abstract readonly apiPath: string;\n\n  private elements: AuditableOperationCategory[] = [];\n\n  constructor(\n    private httpClient: HttpClient,\n    private appConfig: AppConfiguration,\n    private runtime: RuntimeConfiguration,\n    private timeoutConfig: TimeoutConfiguration,\n    private logger: Logging,) {\n\n    super(httpClient, logger, timeoutConfig);\n    this.elements = getOperationCategoryArrayMock();\n  }\n\n  getById(id: Guid):\n    Observable<ValueResponse<AuditableOperationCategory | null>> {\n\n    let value =\n      this.elements.find(category =>\n        category.operationCategoryId === id) ?? null;\n\n    const success = value != null;\n\n    let message: string | null = null;\n    if (!success) {\n      message = 'Element not found.'\n    };\n\n    var response =\n      wrapToValueResponse(success, value, message);\n\n    return of(response);\n  }\n\n  getAll(): Observable<ValueResponse<AuditableOperationCategory[] | null>> {\n    var response =\n      wrapToValueResponse(true, this.elements);\n\n    return of(response);\n  }\n\n  add(request: OperationCategoryRequest):\n    Observable<ValidatedResponse<AuditableOperationCategory>> {\n\n    var category = getOperationCategoryByRequestMock(request);\n    var response =\n      wrapToValidatedResponse(category, true);\n\n    return of(response);\n  }\n\n  update(update: OperationCategory):\n    Observable<ValidatedResponse<AuditableOperationCategory>> {\n\n    var category = getOperationCategoryMock(update);\n    var response =\n    wrapToValidatedResponse(category, true);\n\n    return of(response);\n  }\n\n  delete(id: Guid):\n    Observable<BaseResponse> {\n\n    const base = this.runtime.apiBaseUrl;\n    const apiPath = this.apiPath;\n    const url = `${base}${apiPath}/${id}`;\n\n    return this.httpDelete(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpBaseService",
            "type": "injectable"
        },
        {
            "name": "RepositoryService",
            "id": "injectable-RepositoryService-548d23ebd35cb47bce45285adb8adbf157b122b346d6ffe6e488eb50a3889bbe3c7f5045ca81f0beaa349d55a7538265b52270e59135be71e77624c056e89842",
            "file": "src/app/core/services/repository.service.ts",
            "properties": [
                {
                    "name": "apiPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        126,
                        144
                    ]
                },
                {
                    "name": "handleError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BaseResponse>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T[]>>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "request",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpDelete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpGet",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                },
                {
                    "name": "httpPut",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpBaseService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Guid } from 'guid-typescript';\nimport { Observable } from 'rxjs';\n\nimport { BaseResponse, ValueResponse } from '@backend-models/baseResponse';\nimport { ValidatedResponse } from '@backend-models/validatedResponse';\nimport {\n  AppConfiguration,\n  RuntimeConfiguration,\n  TimeoutConfiguration\n} from '@models/appConfiguration';\nimport { Logging } from '@services/abstract/logging';\nimport { RepositoryHandler } from '@services/abstract/repositoryHandler';\nimport { HttpBaseService } from '@services/http-base.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class RepositoryService<T, P, R>\n  extends HttpBaseService\n  implements RepositoryHandler<T, P, R> {\n  abstract readonly apiPath: string;\n\n  constructor(\n    private httpClient: HttpClient,\n    private appConfig: AppConfiguration,\n    private runtime: RuntimeConfiguration,\n    private timeoutConfig: TimeoutConfiguration,\n    private logger: Logging,) {\n    super(httpClient, logger, timeoutConfig);\n  }\n\n  getById(id: Guid): Observable<ValueResponse<T>> {\n    const base = this.runtime.apiBaseUrl;\n    const url = `${base}${this.apiPath}/${id}`;\n\n    return this.httpGet(url);\n  }\n\n  getAll(): Observable<ValueResponse<T[]>> {\n    const base = this.runtime.apiBaseUrl;\n    const url = `${base}${this.apiPath}`;\n\n    return this.httpGet(url);\n  }\n\n  add(request: R):\n    Observable<ValidatedResponse<T>> {\n\n    const base = this.runtime.apiBaseUrl;\n    const url = `${base}${this.apiPath}`;\n\n    return this.httpPost(url, request);\n  }\n\n  update(request: P):\n    Observable<ValidatedResponse<T>> {\n\n    const base = this.runtime.apiBaseUrl;\n    const apiPath = this.apiPath;\n    const url = `${base}${apiPath}}`;\n\n    return this.httpPut(url, request);\n  }\n\n  delete(id: Guid):\n    Observable<BaseResponse> {\n\n    const base = this.runtime.apiBaseUrl;\n    const apiPath = this.apiPath;\n    const url = `${base}${apiPath}/${id}`;\n\n    return this.httpDelete(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "runtime",
                        "type": "RuntimeConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutConfig",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpBaseService",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "ArticleListResolver",
            "id": "injectable-ArticleListResolver-9b24a9f8a4674178127daa9531349ceb901e1b561efc7cffeb8f76ceac955d89e1287e094c5dcfad0f7bbd758b07ea6fbf85e7e597ed024a0e68ba5e26af615d",
            "file": "src/app/core/services/resolvers/article-list-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ArticleList>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { ArticleList } from 'src/app/core/backend-models/articleList';\nimport { ArticleHandler } from '@services/abstract/articleHandler';\n\n@Injectable({ providedIn: 'root' })\nexport class ArticleListResolver implements Resolve<ArticleList> {\n  constructor(private handler: ArticleHandler) { }\n\n  resolve(): Observable<ArticleList> {\n    return this.handler.getArticleList();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "handler",
                        "type": "ArticleHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "handler",
                        "type": "ArticleHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ArticleResolver",
            "id": "injectable-ArticleResolver-c10f9f0c0a3c01b4153301c2776fa38fd4a00f101a7ffb264e600d5a66d6c226e0a4326717ade22b056c745e012ea6dd6e51664b63afa528e55450105a5446e7",
            "file": "src/app/core/services/resolvers/article-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Article>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { Article } from 'src/app/core/backend-models/article';\nimport { ArticleHandler } from '@services/abstract/articleHandler';\n\n@Injectable({ providedIn: 'root' })\nexport class ArticleResolver implements Resolve<Article> {\n  constructor(private handler: ArticleHandler) { }\n\n  resolve(route: ActivatedRouteSnapshot): Observable<Article> {\n    const id = route.paramMap.get('id');\n    return this.handler.getArticle(id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "handler",
                        "type": "ArticleHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "handler",
                        "type": "ArticleHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "Account",
            "id": "class-Account-70ccaf3c990498f649cba97d9d4ef97db24c6f1f8ecc47b9634faaec79e74d58e6ac80ab0de84741ce6fb5bd66b07fdacebd3f44ab65d314554aca66e7fa9ae1",
            "file": "src/app/core/backend-models/finance/account.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { Operation } from './operation';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class AccountRequest {\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  operations: Operation[];\n\n  constructor(\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = []) {\n\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.operations = operations;\n  }\n}\n\nexport class Account\n  extends AuditableEntity\n  implements AccountRequest, IdentifiableEntity {\n\n  accountId: Guid;\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  operations: Operation[];\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    accountId: Guid,\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = [],\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.accountId = accountId;\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.operations = operations;\n  }\n\n  getId = (): Guid => this.accountId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "getId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "operations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Operation[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedById",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AuditableEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "AccountRequest",
                "IdentifiableEntity"
            ]
        },
        {
            "name": "AccountRequest",
            "id": "class-AccountRequest-70ccaf3c990498f649cba97d9d4ef97db24c6f1f8ecc47b9634faaec79e74d58e6ac80ab0de84741ce6fb5bd66b07fdacebd3f44ab65d314554aca66e7fa9ae1",
            "file": "src/app/core/backend-models/finance/account.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { Operation } from './operation';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class AccountRequest {\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  operations: Operation[];\n\n  constructor(\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = []) {\n\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.operations = operations;\n  }\n}\n\nexport class Account\n  extends AuditableEntity\n  implements AccountRequest, IdentifiableEntity {\n\n  accountId: Guid;\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  operations: Operation[];\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    accountId: Guid,\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = [],\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.accountId = accountId;\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.operations = operations;\n  }\n\n  getId = (): Guid => this.accountId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "operations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Operation[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ApiConfiguration",
            "id": "class-ApiConfiguration-269efe641cc99d464cacfe693c2f9baf818e5d504fb95ceb22589b7c11eb791c588b8b56d42893bf8de7903fb82bc99e249d5d8bcbb1b7e8c0cfe75dd03ed7e1",
            "file": "src/app/core/models/appConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LogLevel } from '@enums/logLevel';\n\nexport class RuntimeConfiguration {\n  apiBaseUrl: string;\n  logLevel: LogLevel;\n\n  constructor(\n    apiBaseUrl: string,\n    logLevel: LogLevel) {\n\n    this.apiBaseUrl = apiBaseUrl;\n    this.logLevel = logLevel;\n  }\n}\n\nexport class AppConfiguration {\n  timeouts: TimeoutConfiguration;\n  apiPaths: ApiConfiguration;\n  article: ArticleConfiguration;\n\n  constructor(\n    article: ArticleConfiguration,\n    apiPaths: ApiConfiguration,\n    timeouts: TimeoutConfiguration) {\n    this.article = article;\n    this.apiPaths = apiPaths;\n    this.timeouts = timeouts;\n  }\n}\n\nexport class ArticleConfiguration {\n  defaultArticleId: string;\n  defaultListLimit: number;\n\n  constructor(\n    defaultArticleId: string,\n    defaultListLimit: number) {\n    this.defaultArticleId = defaultArticleId;\n    this.defaultListLimit = defaultListLimit;\n  }\n}\n\nexport class TimeoutConfiguration {\n  requestTimeout: number;\n\n  constructor(\n    requestTimeout: number) {\n    this.requestTimeout = requestTimeout;\n  }\n}\n\nexport class ApiConfiguration {\n  articleUrl: string;\n  listUrl: string;\n  operationCategory: string;\n\n  constructor(\n    articleUrl: string,\n    listUrl: string,\n    operationCategory: string) {\n\n    this.articleUrl = articleUrl;\n    this.listUrl = listUrl;\n    this.operationCategory = operationCategory;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "articleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationCategory",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "articleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationCategory",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "articleUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "listUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "operationCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppConfiguration",
            "id": "class-AppConfiguration-269efe641cc99d464cacfe693c2f9baf818e5d504fb95ceb22589b7c11eb791c588b8b56d42893bf8de7903fb82bc99e249d5d8bcbb1b7e8c0cfe75dd03ed7e1",
            "file": "src/app/core/models/appConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LogLevel } from '@enums/logLevel';\n\nexport class RuntimeConfiguration {\n  apiBaseUrl: string;\n  logLevel: LogLevel;\n\n  constructor(\n    apiBaseUrl: string,\n    logLevel: LogLevel) {\n\n    this.apiBaseUrl = apiBaseUrl;\n    this.logLevel = logLevel;\n  }\n}\n\nexport class AppConfiguration {\n  timeouts: TimeoutConfiguration;\n  apiPaths: ApiConfiguration;\n  article: ArticleConfiguration;\n\n  constructor(\n    article: ArticleConfiguration,\n    apiPaths: ApiConfiguration,\n    timeouts: TimeoutConfiguration) {\n    this.article = article;\n    this.apiPaths = apiPaths;\n    this.timeouts = timeouts;\n  }\n}\n\nexport class ArticleConfiguration {\n  defaultArticleId: string;\n  defaultListLimit: number;\n\n  constructor(\n    defaultArticleId: string,\n    defaultListLimit: number) {\n    this.defaultArticleId = defaultArticleId;\n    this.defaultListLimit = defaultListLimit;\n  }\n}\n\nexport class TimeoutConfiguration {\n  requestTimeout: number;\n\n  constructor(\n    requestTimeout: number) {\n    this.requestTimeout = requestTimeout;\n  }\n}\n\nexport class ApiConfiguration {\n  articleUrl: string;\n  listUrl: string;\n  operationCategory: string;\n\n  constructor(\n    articleUrl: string,\n    listUrl: string,\n    operationCategory: string) {\n\n    this.articleUrl = articleUrl;\n    this.listUrl = listUrl;\n    this.operationCategory = operationCategory;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "article",
                        "type": "ArticleConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeouts",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "article",
                        "type": "ArticleConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPaths",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeouts",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "apiPaths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "article",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArticleConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timeouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeoutConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArticleConfiguration",
            "id": "class-ArticleConfiguration-269efe641cc99d464cacfe693c2f9baf818e5d504fb95ceb22589b7c11eb791c588b8b56d42893bf8de7903fb82bc99e249d5d8bcbb1b7e8c0cfe75dd03ed7e1",
            "file": "src/app/core/models/appConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LogLevel } from '@enums/logLevel';\n\nexport class RuntimeConfiguration {\n  apiBaseUrl: string;\n  logLevel: LogLevel;\n\n  constructor(\n    apiBaseUrl: string,\n    logLevel: LogLevel) {\n\n    this.apiBaseUrl = apiBaseUrl;\n    this.logLevel = logLevel;\n  }\n}\n\nexport class AppConfiguration {\n  timeouts: TimeoutConfiguration;\n  apiPaths: ApiConfiguration;\n  article: ArticleConfiguration;\n\n  constructor(\n    article: ArticleConfiguration,\n    apiPaths: ApiConfiguration,\n    timeouts: TimeoutConfiguration) {\n    this.article = article;\n    this.apiPaths = apiPaths;\n    this.timeouts = timeouts;\n  }\n}\n\nexport class ArticleConfiguration {\n  defaultArticleId: string;\n  defaultListLimit: number;\n\n  constructor(\n    defaultArticleId: string,\n    defaultListLimit: number) {\n    this.defaultArticleId = defaultArticleId;\n    this.defaultListLimit = defaultListLimit;\n  }\n}\n\nexport class TimeoutConfiguration {\n  requestTimeout: number;\n\n  constructor(\n    requestTimeout: number) {\n    this.requestTimeout = requestTimeout;\n  }\n}\n\nexport class ApiConfiguration {\n  articleUrl: string;\n  listUrl: string;\n  operationCategory: string;\n\n  constructor(\n    articleUrl: string,\n    listUrl: string,\n    operationCategory: string) {\n\n    this.articleUrl = articleUrl;\n    this.listUrl = listUrl;\n    this.operationCategory = operationCategory;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "defaultArticleId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultListLimit",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "defaultArticleId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultListLimit",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultArticleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "defaultListLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArticleHandler",
            "id": "class-ArticleHandler-1b0648112687020eb5811f70bf8503c2cc21f5867060356a91c99b98139dd18ff381c5e69e89b738ea84e3057c7d0278dd8ed62e7066c9b7bca2e2872faa68c8",
            "file": "src/app/core/services/abstract/articleHandler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { Article } from 'src/app/core/backend-models/article';\nimport { ArticleList } from 'src/app/core/backend-models/articleList';\n\nexport abstract class ArticleHandler {\n  abstract getArticle: (id: string | null) => Observable<Article>;\n  abstract getArticleList: () => Observable<ArticleList>;\n  abstract getArticleListWithLimit: (limit: number) => Observable<ArticleList>;\n}\n",
            "properties": [
                {
                    "name": "getArticle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getArticleList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getArticleListWithLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuditableEntity",
            "id": "class-AuditableEntity-36b76e08c9b846b06dd7ed5f3ebb70ad5ad2be20354e1ed00c8371fe2f7fcd7764b90f859f2eb9757139a24abcc629c34bc71ee0f428dbe8a2ff8a70220dd5ab",
            "file": "src/app/core/backend-models/auditableEntity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nexport class AuditableEntity {\n  readonly ownerId: Guid;\n  readonly owner: string;\n  readonly createdDate: Date;\n\n  readonly lastModifiedById: Guid | null = null;\n  readonly lastModifiedBy: string | null = null\n  readonly lastModifiedDate: Date | null = null\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    this.ownerId = ownerId;\n    this.owner = owner;\n    this.createdDate = createdDate;\n\n    this.lastModifiedById = lastModifiedById;\n    this.lastModifiedBy = lastModifiedBy;\n    this.lastModifiedDate = lastModifiedDate;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedById",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuditableOperationCategory",
            "id": "class-AuditableOperationCategory-c12061aac888816b19c7a53fa762a39dac0159b0605997c4d8bbb7a5b529a35acfa47199b29eec4bf0c42dc6fed2a6a9a08fcbe4a6aa26ed494f8c983dc7d799",
            "file": "src/app/core/backend-models/finance/operationCategory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class OperationCategoryRequest {\n  name: string;\n  color: string;\n\n  constructor(\n    name: string,\n    color: string) {\n\n    this.name = name;\n    this.color = color;\n  }\n}\n\nexport class OperationCategory\n  extends OperationCategoryRequest\n  implements IdentifiableEntity {\n\n  operationCategoryId: Guid;\n\n  constructor(\n    operationCategoryId: Guid,\n    name: string,\n    color: string) {\n\n    super(name, color);\n    this.operationCategoryId = operationCategoryId;\n  }\n\n  getUpdated(request: OperationCategoryRequest): OperationCategory {\n    const updated = {\n      ...this,\n      color: request.color,\n      name: request.name\n    }\n\n    return updated;\n  }\n\n  getId = (): Guid => this.operationCategoryId;\n}\n\nexport class AuditableOperationCategory\n  extends OperationCategory\n  implements AuditableEntity, IdentifiableEntity {\n\n  readonly ownerId: Guid;\n  readonly owner: string;\n  readonly createdDate: Date;\n\n  readonly lastModifiedById: Guid | null = null;\n  readonly lastModifiedBy: string | null = null\n  readonly lastModifiedDate: Date | null = null\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    operationId: Guid,\n    name: string,\n    color: string,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(operationId, name, color);\n\n    this.ownerId = ownerId;\n    this.owner = owner;\n    this.createdDate = createdDate;\n\n    this.lastModifiedById = lastModifiedById;\n    this.lastModifiedBy = lastModifiedBy;\n    this.lastModifiedDate = lastModifiedDate;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedById",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid | null",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastModifiedDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "getId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "OperationCategory"
                    }
                },
                {
                    "name": "operationCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "OperationCategory"
                    }
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "OperationCategoryRequest"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "OperationCategoryRequest"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getUpdated",
                    "args": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OperationCategory",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "OperationCategory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "OperationCategory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "AuditableEntity",
                "IdentifiableEntity"
            ]
        },
        {
            "name": "CellState",
            "id": "class-CellState-b405b68b5152adee1a98267ba1dfd9fe8b1cfe6e1508c8ae33d139d21ac89aad7952223474e5fe492251d97ad35df28843c1679536ba17e693a4c3c65ed4ec5e",
            "file": "src/app/core/models/game-of-life/cellState.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export enum CellStyle {\n  Unknown = '',\n  Alive = 'alive',\n  Dead = 'grave',\n  NotBorn = ''\n}\n\nexport class CellState {\n  style: CellStyle;\n  value: number;\n\n  constructor(\n    style: CellStyle,\n    value: number) {\n    this.style = style;\n    this.value = value\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "style",
                        "type": "CellStyle",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "style",
                        "type": "CellStyle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CellStyle",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnData",
            "id": "class-ColumnData-b44035f8338a2aef7cce1ade2cd199e1acbcc4b15095ae705e3eb585738fa73712052b903d9a05e9b2832d612fa63b2df84d3fdfe283a6193d08cde5626d7159",
            "file": "src/app/core/models/article/tableData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { SortingOrder } from '@enums/sortingType';\nimport { CompareFunction, GetProperty } from '@shared/utilities/sorting';\nimport {\n  SortingOrderChangeMap,\n  SortingOrderIconMap\n} from '@shared/utilities/sorting-map';\n\nexport interface RowData<T> {\n  index: number;\n  record: T;\n  cells: (string | null)[];\n}\n\nexport class ColumnView {\n  id: Guid;\n  icon: string | null;\n  sortingOrder: SortingOrder;\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  constructor(id: Guid,\n    icon: string | null,\n    sortingOrder: SortingOrder,\n    title: string,\n    nonSortable: boolean,\n    widthPercentage: number | null) {\n    this.id = id;\n    this.icon = icon;\n    this.sortingOrder = sortingOrder;\n    this.title = title;\n    this.nonSortable = nonSortable;\n    this.widthPercentage = widthPercentage;\n\n  }\n}\n\nexport abstract class ColumnDataBase<T> {\n  abstract id: Guid;\n  abstract icon: string | null;\n  abstract sortingOrder: SortingOrder | null;\n\n  abstract title: string;\n  abstract nonSortable: boolean;\n  abstract widthPercentage: number | null;\n\n  abstract getCellContent: GetProperty<T, string>;\n  abstract compareFunction: CompareFunction<T> | null;\n\n  abstract switchSortingOrder(): void;\n  abstract setSortingToDefault(): void;\n\n  abstract getView(): ColumnView;\n}\n\nexport class ColumnData<T> implements ColumnDataBase<T>{\n  private _id: Guid;\n  private _sortingOrder: SortingOrder;\n  private _icon: string | null;\n\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  getCellContent: GetProperty<T, string>;\n  compareFunction: CompareFunction<T> | null;\n\n  public get id(): Guid {\n    return this._id;\n  }\n\n  icon: string | null;\n\n  public get sortingOrder(): SortingOrder {\n    return this._sortingOrder;\n  }\n\n  constructor(\n    title: string,\n    widthPercentage: number | null = null,\n    nonSortable: boolean = false,\n    getCellContent: GetProperty<T, string>,\n    compareFunction: CompareFunction<T> | null = null) {\n\n    this._id = Guid.create();\n    this.title = title;\n    this.widthPercentage = widthPercentage;\n    this.nonSortable = nonSortable;\n    this.getCellContent = getCellContent;\n    this.compareFunction = compareFunction;\n\n    if (nonSortable) {\n      this._sortingOrder = SortingOrder.None;\n    } else {\n      this._sortingOrder = SortingOrder.Default;\n    }\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) ?? null;\n    this.icon = this._icon;\n  }\n\n  switchSortingOrder(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n\n    this._sortingOrder =\n      SortingOrderChangeMap.get(this._sortingOrder) || SortingOrder.None;\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) || null;\n    this.icon = this._icon;\n  }\n\n  setSortingToDefault(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n    this._sortingOrder = SortingOrder.Default;\n    this._icon = SortingOrderIconMap.get(SortingOrder.Default) || null;;\n    this.icon = this._icon;\n  }\n\n  getView = (): ColumnView => ({\n    id: this._id,\n    sortingOrder: this._sortingOrder,\n    title: this.title,\n    icon: this._icon,\n    nonSortable: this.nonSortable,\n    widthPercentage: this.widthPercentage\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "widthPercentage",
                        "type": "number | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "nonSortable",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "getCellContent",
                        "type": "GetProperty<T | string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "compareFunction",
                        "type": "CompareFunction<T> | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "widthPercentage",
                        "type": "number | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nonSortable",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "getCellContent",
                        "type": "GetProperty<T | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compareFunction",
                        "type": "CompareFunction<T> | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sortingOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortingOrder",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareFunction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompareFunction<T> | null",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "getCellContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetProperty<T | string>",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "getView",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "nonSortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "widthPercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methods": [
                {
                    "name": "setSortingToDefault",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchSortingOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "Guid",
                        "line": 70
                    }
                },
                "sortingOrder": {
                    "name": "sortingOrder",
                    "getSignature": {
                        "name": "sortingOrder",
                        "type": "",
                        "returnType": "SortingOrder",
                        "line": 76
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ColumnDataBase"
            ]
        },
        {
            "name": "ColumnDataBase",
            "id": "class-ColumnDataBase-b44035f8338a2aef7cce1ade2cd199e1acbcc4b15095ae705e3eb585738fa73712052b903d9a05e9b2832d612fa63b2df84d3fdfe283a6193d08cde5626d7159",
            "file": "src/app/core/models/article/tableData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { SortingOrder } from '@enums/sortingType';\nimport { CompareFunction, GetProperty } from '@shared/utilities/sorting';\nimport {\n  SortingOrderChangeMap,\n  SortingOrderIconMap\n} from '@shared/utilities/sorting-map';\n\nexport interface RowData<T> {\n  index: number;\n  record: T;\n  cells: (string | null)[];\n}\n\nexport class ColumnView {\n  id: Guid;\n  icon: string | null;\n  sortingOrder: SortingOrder;\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  constructor(id: Guid,\n    icon: string | null,\n    sortingOrder: SortingOrder,\n    title: string,\n    nonSortable: boolean,\n    widthPercentage: number | null) {\n    this.id = id;\n    this.icon = icon;\n    this.sortingOrder = sortingOrder;\n    this.title = title;\n    this.nonSortable = nonSortable;\n    this.widthPercentage = widthPercentage;\n\n  }\n}\n\nexport abstract class ColumnDataBase<T> {\n  abstract id: Guid;\n  abstract icon: string | null;\n  abstract sortingOrder: SortingOrder | null;\n\n  abstract title: string;\n  abstract nonSortable: boolean;\n  abstract widthPercentage: number | null;\n\n  abstract getCellContent: GetProperty<T, string>;\n  abstract compareFunction: CompareFunction<T> | null;\n\n  abstract switchSortingOrder(): void;\n  abstract setSortingToDefault(): void;\n\n  abstract getView(): ColumnView;\n}\n\nexport class ColumnData<T> implements ColumnDataBase<T>{\n  private _id: Guid;\n  private _sortingOrder: SortingOrder;\n  private _icon: string | null;\n\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  getCellContent: GetProperty<T, string>;\n  compareFunction: CompareFunction<T> | null;\n\n  public get id(): Guid {\n    return this._id;\n  }\n\n  icon: string | null;\n\n  public get sortingOrder(): SortingOrder {\n    return this._sortingOrder;\n  }\n\n  constructor(\n    title: string,\n    widthPercentage: number | null = null,\n    nonSortable: boolean = false,\n    getCellContent: GetProperty<T, string>,\n    compareFunction: CompareFunction<T> | null = null) {\n\n    this._id = Guid.create();\n    this.title = title;\n    this.widthPercentage = widthPercentage;\n    this.nonSortable = nonSortable;\n    this.getCellContent = getCellContent;\n    this.compareFunction = compareFunction;\n\n    if (nonSortable) {\n      this._sortingOrder = SortingOrder.None;\n    } else {\n      this._sortingOrder = SortingOrder.Default;\n    }\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) ?? null;\n    this.icon = this._icon;\n  }\n\n  switchSortingOrder(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n\n    this._sortingOrder =\n      SortingOrderChangeMap.get(this._sortingOrder) || SortingOrder.None;\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) || null;\n    this.icon = this._icon;\n  }\n\n  setSortingToDefault(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n    this._sortingOrder = SortingOrder.Default;\n    this._icon = SortingOrderIconMap.get(SortingOrder.Default) || null;;\n    this.icon = this._icon;\n  }\n\n  getView = (): ColumnView => ({\n    id: this._id,\n    sortingOrder: this._sortingOrder,\n    title: this.title,\n    icon: this._icon,\n    nonSortable: this.nonSortable,\n    widthPercentage: this.widthPercentage\n  });\n}\n",
            "properties": [
                {
                    "name": "compareFunction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompareFunction<T> | null",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getCellContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetProperty<T | string>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "nonSortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "sortingOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortingOrder | null",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "widthPercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getView",
                    "args": [],
                    "optional": false,
                    "returnType": "ColumnView",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "setSortingToDefault",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "switchSortingOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnView",
            "id": "class-ColumnView-b44035f8338a2aef7cce1ade2cd199e1acbcc4b15095ae705e3eb585738fa73712052b903d9a05e9b2832d612fa63b2df84d3fdfe283a6193d08cde5626d7159",
            "file": "src/app/core/models/article/tableData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { SortingOrder } from '@enums/sortingType';\nimport { CompareFunction, GetProperty } from '@shared/utilities/sorting';\nimport {\n  SortingOrderChangeMap,\n  SortingOrderIconMap\n} from '@shared/utilities/sorting-map';\n\nexport interface RowData<T> {\n  index: number;\n  record: T;\n  cells: (string | null)[];\n}\n\nexport class ColumnView {\n  id: Guid;\n  icon: string | null;\n  sortingOrder: SortingOrder;\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  constructor(id: Guid,\n    icon: string | null,\n    sortingOrder: SortingOrder,\n    title: string,\n    nonSortable: boolean,\n    widthPercentage: number | null) {\n    this.id = id;\n    this.icon = icon;\n    this.sortingOrder = sortingOrder;\n    this.title = title;\n    this.nonSortable = nonSortable;\n    this.widthPercentage = widthPercentage;\n\n  }\n}\n\nexport abstract class ColumnDataBase<T> {\n  abstract id: Guid;\n  abstract icon: string | null;\n  abstract sortingOrder: SortingOrder | null;\n\n  abstract title: string;\n  abstract nonSortable: boolean;\n  abstract widthPercentage: number | null;\n\n  abstract getCellContent: GetProperty<T, string>;\n  abstract compareFunction: CompareFunction<T> | null;\n\n  abstract switchSortingOrder(): void;\n  abstract setSortingToDefault(): void;\n\n  abstract getView(): ColumnView;\n}\n\nexport class ColumnData<T> implements ColumnDataBase<T>{\n  private _id: Guid;\n  private _sortingOrder: SortingOrder;\n  private _icon: string | null;\n\n  title: string;\n  nonSortable: boolean;\n  widthPercentage: number | null;\n\n  getCellContent: GetProperty<T, string>;\n  compareFunction: CompareFunction<T> | null;\n\n  public get id(): Guid {\n    return this._id;\n  }\n\n  icon: string | null;\n\n  public get sortingOrder(): SortingOrder {\n    return this._sortingOrder;\n  }\n\n  constructor(\n    title: string,\n    widthPercentage: number | null = null,\n    nonSortable: boolean = false,\n    getCellContent: GetProperty<T, string>,\n    compareFunction: CompareFunction<T> | null = null) {\n\n    this._id = Guid.create();\n    this.title = title;\n    this.widthPercentage = widthPercentage;\n    this.nonSortable = nonSortable;\n    this.getCellContent = getCellContent;\n    this.compareFunction = compareFunction;\n\n    if (nonSortable) {\n      this._sortingOrder = SortingOrder.None;\n    } else {\n      this._sortingOrder = SortingOrder.Default;\n    }\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) ?? null;\n    this.icon = this._icon;\n  }\n\n  switchSortingOrder(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n\n    this._sortingOrder =\n      SortingOrderChangeMap.get(this._sortingOrder) || SortingOrder.None;\n    this._icon = SortingOrderIconMap.get(this._sortingOrder) || null;\n    this.icon = this._icon;\n  }\n\n  setSortingToDefault(): void {\n    if (this._sortingOrder === SortingOrder.None) {\n      return;\n    }\n    this._sortingOrder = SortingOrder.Default;\n    this._icon = SortingOrderIconMap.get(SortingOrder.Default) || null;;\n    this.icon = this._icon;\n  }\n\n  getView = (): ColumnView => ({\n    id: this._id,\n    sortingOrder: this._sortingOrder,\n    title: this.title,\n    icon: this._icon,\n    nonSortable: this.nonSortable,\n    widthPercentage: this.widthPercentage\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "icon",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sortingOrder",
                        "type": "SortingOrder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nonSortable",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "widthPercentage",
                        "type": "number | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "icon",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sortingOrder",
                        "type": "SortingOrder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nonSortable",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "widthPercentage",
                        "type": "number | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "nonSortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sortingOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortingOrder",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "widthPercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ControlState",
            "id": "class-ControlState-ebde3cd56c1b5097087e1ed3ae2647bfda8cbe4abd157937af2b6a8381779618d0042f72e27103abe3b9427895e4f1900b37244a9ae9e5ec7328535bcd852a26",
            "file": "src/app/core/models/controlState.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ControlState {\n  isInvalid: boolean;\n  error: string | null;\n\n  constructor(\n    isInvalid: boolean = false,\n    error: string | null = null\n  ) {\n    this.isInvalid = isInvalid;\n    this.error = error;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "isInvalid",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "error",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "isInvalid",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "error",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isInvalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DrawingHandler",
            "id": "class-DrawingHandler-dc6ec165076daf14bf8bf95b3e2b6bdfe9ae199f2c3a18a345e9bf8c0a9e52f274a9423c05a60118b1345b86ea22736c93c96c960be8698233026647efdaa269",
            "file": "src/app/core/services/abstract/drawingHandler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Point, Size } from '@models/drawings/elements';\n\nexport abstract class DrawingHandler {\n  abstract paint: (point: Point) => void;\n  abstract initializeCanvas: (canvas: HTMLCanvasElement) => void;\n  abstract resizeCanvas: (size: Size) => void;\n}\n",
            "properties": [
                {
                    "name": "initializeCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "paint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "resizeCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DrawingService",
            "id": "class-DrawingService-e2cf99ee5912d1ada2a3070f5584c4594bfa23e5491d004b76db44b4b2177b4f9550ac00d2b7b427dafcb504b2a31c779a52a0a51df8429c45255185a5c6ef0f",
            "file": "src/app/core/services/drawing/drawing.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Point, Size } from '@models/drawings/elements';\nimport { LineSettings } from '@models/drawings/settings';\nimport { DrawingHandler } from '@services/abstract/drawingHandler';\n\nexport class DrawingService implements DrawingHandler {\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n\n  private readonly lineSettings: LineSettings = new LineSettings(\n    'round',\n    'round',\n    10,\n    100\n  )\n\n  private readonly canvasSize: Size = {\n    width: 500,\n    height: 500\n  }\n\n  private currentX = Infinity;\n  private currentY = Infinity;\n  private colorHue = 0;\n  private backgroundColor = 'white';\n  private contextSelector = '2d';\n\n  initializeCanvas(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.resizeCanvas(this.canvasSize);\n\n    var contextValue = this.canvas.getContext(this.contextSelector);\n\n    if (contextValue == null) {\n      const message =\n        `${this.contextSelector} context is not defined in the canvas`;\n      throw new Error(message);\n    }\n\n    this.context = contextValue! as CanvasRenderingContext2D;\n    this.context.fillStyle = this.backgroundColor;\n    this.context.fill();\n    this.context.lineJoin = this.lineSettings.lineJoin;\n    this.context.lineCap = this.lineSettings.lineCap;\n    this.context.lineWidth = this.lineSettings.lineWidth;\n  }\n\n  resizeCanvas(size: Size) {\n    if (this.canvas == null) {\n      throw new Error('Canvas is not initialized.');\n    }\n\n    this.canvas!.width = size.width;\n    this.canvas!.height = size.height;\n  };\n\n  paint(point: Point) {\n    this.checkIsInitialized();\n\n    this.context!.strokeStyle = this.getStrokeStyle();\n    this.context!.beginPath();\n\n    const xDistance = Math.abs(this.currentX - point.x);\n    const yDistance = Math.abs(this.currentY - point.y);\n\n    const isInPrecisionX = xDistance < this.lineSettings.movePrecision;\n    const isInPrecisionY = yDistance < this.lineSettings.movePrecision;\n\n    if (isInPrecisionX && isInPrecisionY) {\n      this.context!.moveTo(this.currentX, this.currentY);\n    }\n\n    this.context!.lineTo(point.x, point.y);\n    this.context!.stroke();\n\n    this.currentX = point.x;\n    this.currentY = point.y\n    this.colorHue++;\n  }\n\n  checkIsInitialized() {\n    if (this.canvas == null || this.context == null) {\n      throw new Error('Drawing service is not initialized.');\n    }\n  }\n\n  private getStrokeStyle =\n    (): string => `hsl(${this.colorHue}, 100%, 60%)`;\n\n  private getCanvasSize(canvas: HTMLCanvasElement) {\n    if (canvas == null) {\n      throw new Error('Canvas is not initialized.')\n    }\n\n    const canvasSize: Size = {\n      width: this.canvas!.offsetWidth,\n      height: this.canvas!.offsetHeight\n    }\n\n    return canvasSize;\n  }\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canvas",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLCanvasElement | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canvasSize",
                    "defaultValue": "{\n    width: 500,\n    height: 500\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "colorHue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "context",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasRenderingContext2D | null",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "contextSelector",
                    "defaultValue": "'2d'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentX",
                    "defaultValue": "Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentY",
                    "defaultValue": "Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getStrokeStyle",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lineSettings",
                    "defaultValue": "new LineSettings(\n    'round',\n    'round',\n    10,\n    100\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LineSettings",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkIsInitialized",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCanvasSize",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Size",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeCanvas",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paint",
                    "args": [
                        {
                            "name": "point",
                            "type": "Point",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "Point",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeCanvas",
                    "args": [
                        {
                            "name": "size",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DrawingHandler"
            ]
        },
        {
            "name": "GameOfLifeService",
            "id": "class-GameOfLifeService-0d03c2b46790fed8e3fdbdf5454cc356c9c07eddd734b947c3ec1be2378f48b865a7a3baad06e79d4d26420bb8bcb4df176ca0322a3a3df3c6a429f4a7b33931",
            "file": "src/app/core/services/game-of-life/game-of-life.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { interval, BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\nimport { CellState, CellStyle } from '@models/game-of-life/cellState';\nimport { GameState } from '@models/game-of-life/gameState';\nimport { GameSettings } from '@models/game-of-life/gameSettings';\nimport { GameSpeed } from '@enums/gameSpeed';\n\n@UntilDestroy()\nexport class GameOfLifeService {\n  private readonly secondsToMs = 1000;\n  private _gameSettings: GameSettings;\n  private _gameCycle: Observable<number> | null = null;\n  private _cycleSubscription: Subscription | null = null;\n\n  private _gameStateSubject = new BehaviorSubject(GameState.NotStarted);\n  private _cellsSubject = new BehaviorSubject<CellState[][]>([]);\n  private _alivePercentageSubject = new BehaviorSubject(0);\n\n  public get state(): Observable<GameState> {\n    return this._gameStateSubject.asObservable();\n  }\n\n  public get cells(): Observable<CellState[][]> {\n    return this._cellsSubject.asObservable();\n  }\n\n  public get alivePercentage(): Observable<number> {\n    return this._alivePercentageSubject.asObservable();\n  }\n\n  private _totalCells = 0;\n\n  constructor(settings: GameSettings) {\n    this._gameSettings = settings;\n    this._totalCells = settings.gridHeight * settings.gridWidth;\n  }\n\n  restart(settings: GameSettings) {\n    this.end();\n    this._gameSettings = settings;\n    this._totalCells = settings.gridHeight * settings.gridWidth;\n    this.start();\n  }\n\n  start() {\n    const initial = this.getInitialLife();\n    this._cellsSubject.next(initial);\n\n    const secondsPerCycle =\n      this.getSecondsPerCycle(this._gameSettings.speed);\n\n    this._gameCycle =\n      interval(secondsPerCycle * this.secondsToMs);\n    this._cycleSubscription = this._gameCycle\n      .pipe(untilDestroyed(this))\n      .subscribe(_ => this.nextCycle());\n\n    this._gameStateSubject.next(GameState.Ongoing);\n  }\n\n  pause() {\n    this._gameStateSubject.next(GameState.Paused);\n  }\n\n  unpause() {\n    this._gameStateSubject.next(GameState.Ongoing);\n  }\n\n  end() {\n    this._cycleSubscription?.unsubscribe();\n    this._gameStateSubject.next(GameState.Ended);\n  }\n\n  private getInitialLife(): CellState[][] {\n    let rows = this._gameSettings.gridHeight;\n    let columns = this._gameSettings.gridWidth;\n    let initial: CellState[][] = [];\n\n    let alive = 0;\n\n    for (var row: number = 0; row < rows; row++) {\n      initial[row] = [];\n      for (var column: number = 0; column < columns; column++) {\n        if (initial[row][column]?.value === 1) {\n          continue;\n        }\n\n        const value =\n          this.generateCellValue(this._gameSettings.initialLifePercentage);\n\n        alive += value;\n\n        const style = value === 1 ? CellStyle.Alive : CellStyle.NotBorn;\n        initial[row][column] = { value, style };\n      }\n    }\n\n    const percentage = Math.round(alive / this._totalCells * 100);\n    this._alivePercentageSubject.next(percentage);\n\n    return initial;\n  }\n\n  private generateCellValue(aliveProbability: number): number {\n    const chance = this.randomNumber(1, 100);\n    return chance <= aliveProbability ? 1 : 0;\n  }\n\n  private randomNumber = (min: number, max: number): number =>\n    Math.floor(Math.random() * (max - min + 1) + min)\n\n  private nextCycle(): void {\n    if (this._gameStateSubject.value !== GameState.Ongoing) {\n      return;\n    }\n\n    let anyChanges = false;\n    let alive = 0;\n\n    let currentCells = this._cellsSubject.value;\n    let rows = this._gameSettings.gridHeight;\n    let columns = this._gameSettings.gridWidth;\n\n    let future: CellState[][] = [];\n\n    // Loop through every cell\n    for (let row = 0; row < rows; row++) {\n      future[row] = [];\n      for (let column = 0; column < columns; column++) {\n\n        let aliveNeighbors = 0\n        for (let rowIterator = -1; rowIterator < 2; rowIterator++) {\n          for (let columnIterator = -1; columnIterator < 2; columnIterator++) {\n\n            if (columnIterator === 0 && rowIterator === 0) {\n              continue;\n            }\n\n            let neighborRow = row + rowIterator;\n            let neighborColumn = column + columnIterator;\n\n            if (neighborRow < 0 || neighborColumn < 0 ||\n              neighborRow >= rows || neighborColumn >= columns) {\n              continue;\n            }\n\n            aliveNeighbors +=\n              currentCells[row + rowIterator][column + columnIterator].value\n          }\n        }\n\n        // Apply the Rules of Life\n        let currentValue = currentCells[row][column].value;\n        let futureValue = currentValue;\n        let futureStyle = currentCells[row][column].style;\n\n        // Cell either lonely or overpopulated and dead\n        if (aliveNeighbors < 2 || aliveNeighbors > 3) {\n          futureValue = 0;\n          futureStyle = CellStyle.Dead;\n        }\n        else if (aliveNeighbors === 3) {\n          futureValue = 1;\n          futureStyle = CellStyle.Alive;\n        }\n\n        if (!anyChanges && futureValue !== currentValue) {\n          anyChanges = true;\n        }\n\n        alive += futureValue;\n\n        future[row][column] = {\n          value: futureValue,\n          style: futureStyle\n        }\n      }\n    }\n\n    if (!anyChanges) {\n      this.end();\n      return;\n    }\n\n    this._cellsSubject.next(future);\n\n    const percentage = Math.ceil(alive / this._totalCells * 100);\n    this._alivePercentageSubject.next(percentage);\n  }\n\n  private getSecondsPerCycle(speed: GameSpeed): number {\n    switch (speed) {\n      case GameSpeed.Fast: return 0.3;\n      case GameSpeed.Slow: return 1;\n      default: return 0.5;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settings",
                        "type": "GameSettings",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "settings",
                        "type": "GameSettings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_alivePercentageSubject",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cellsSubject",
                    "defaultValue": "new BehaviorSubject<CellState[][]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cycleSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_gameCycle",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number> | null",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_gameSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameSettings",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_gameStateSubject",
                    "defaultValue": "new BehaviorSubject(GameState.NotStarted)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_totalCells",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "randomNumber",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "secondsToMs",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "end",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateCellValue",
                    "args": [
                        {
                            "name": "aliveProbability",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "aliveProbability",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInitialLife",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSecondsPerCycle",
                    "args": [
                        {
                            "name": "speed",
                            "type": "GameSpeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "speed",
                            "type": "GameSpeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextCycle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pause",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restart",
                    "args": [
                        {
                            "name": "settings",
                            "type": "GameSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "GameSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "start",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unpause",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "Observable<GameState>",
                        "line": 21
                    }
                },
                "cells": {
                    "name": "cells",
                    "getSignature": {
                        "name": "cells",
                        "type": "",
                        "returnType": "Observable<[][]>",
                        "line": 25
                    }
                },
                "alivePercentage": {
                    "name": "alivePercentage",
                    "getSignature": {
                        "name": "alivePercentage",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "GameSettings",
            "id": "class-GameSettings-c76ee1c827b691f3535006621a410716d6e3e4350a9917e2b3e7c1d651f400e6e1aced951221730b2919b288bdfd2cf9c7b5a0828b02e76c9f5ce27d9873b7e2",
            "file": "src/app/core/models/game-of-life/gameSettings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GameSpeed } from '@enums/gameSpeed';\n\nexport class GameSettings {\n  gridWidth: number;\n  gridHeight: number;\n  initialLifePercentage: number;\n  speed: GameSpeed;\n\n  constructor(\n    gridWidth: number,\n    gridHeight: number,\n    initialLife: number,\n    speed: GameSpeed) {\n    this.gridHeight = gridHeight;\n    this.gridWidth = gridWidth;\n    this.initialLifePercentage = initialLife;\n    this.speed = speed;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gridWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gridHeight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initialLife",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "speed",
                        "type": "GameSpeed",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "gridWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gridHeight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initialLife",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "speed",
                        "type": "GameSpeed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "gridHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "gridWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "initialLifePercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameSpeed",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpBaseService",
            "id": "class-HttpBaseService-dfbaaf3e9d2ca6165b0d9e7c0756474da1422bf95770eefe03f97364170b2547844bf1cb5db4893dfaa08c221fbd44dbde4110d7e2b866d79e8fd749cadecfa4",
            "file": "src/app/core/services/http-base.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpParams\n} from '@angular/common/http';\n\nimport { catchError, Observable, throwError, timeout } from 'rxjs';\n\nimport { Logging } from './abstract/logging';\nimport { TimeoutConfiguration } from '@models/appConfiguration';\n\nexport class HttpBaseService {\n\n  constructor(\n    private http: HttpClient,\n    private logging: Logging,\n    private timeouts: TimeoutConfiguration) { }\n\n  protected handleError = (error: HttpErrorResponse) => {\n    if (error != null) {\n      this.logging.error(error.message, error);\n    }\n\n    // Return an observable with a user-facing error message.\n    return throwError(() =>\n      new Error('Something bad happened; please try again later.'));\n  }\n\n  protected httpGet<T>(\n    url: string,\n    params: HttpParams | undefined = undefined): Observable<T> {\n    return this.http\n      .get<T>(url, { params: params })\n      .pipe(\n        timeout(this.timeouts.requestTimeout),\n        catchError(this.handleError)\n      );\n  }\n\n  protected httpPost<T, R>(\n    url: string,\n    value: T,\n    params: HttpParams | undefined = undefined): Observable<R> {\n    return this.http\n      .post<R>(url, value, { params: params })\n      .pipe(\n        timeout(this.timeouts.requestTimeout),\n        catchError(this.handleError)\n      );\n  }\n\n  protected httpPut<T, R>(\n    url: string,\n    value: T,\n    params: HttpParams | undefined = undefined): Observable<R> {\n    return this.http\n      .get<R>(url, { params: params })\n      .pipe(\n        timeout(this.timeouts.requestTimeout),\n        catchError(this.handleError)\n      );\n  }\n\n  protected httpDelete<T>(\n    url: string,\n    params: HttpParams | undefined = undefined): Observable<T> {\n    return this.http\n      .delete<T>(url, { params: params })\n      .pipe(\n        timeout(this.timeouts.requestTimeout),\n        catchError(this.handleError)\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logging",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeouts",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logging",
                        "type": "Logging",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeouts",
                        "type": "TimeoutConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "handleError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "httpDelete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpGet",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "httpPut",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HttpParams | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IdentifiableEntity",
            "id": "class-IdentifiableEntity-7dfede9c0939ab83e1a6c94cd607d9507c93cff933a56a4cb3ff7d1d5e573a731d9246f28fb03fce382637618beb2e90f1e6b3ae1fdb5fdbdf07d67265792262",
            "file": "src/app/core/models/identifiableEntity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nexport abstract class IdentifiableEntity {\n  abstract getId(): Guid;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "Guid",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LineSettings",
            "id": "class-LineSettings-5b9bbe30f4a573869a0c5ac0b7b2491521e5fd894180c767cfee2375b0ea1c855977311cad25a4206ec218b28801c1326f904479a2052f4dff7aded1a0504cf7",
            "file": "src/app/core/models/drawings/settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LineSettings {\n  lineJoin: CanvasLineJoin;\n  lineCap: CanvasLineCap;\n  lineWidth: number;\n  movePrecision: number;\n\n  constructor(\n    lineJoin: CanvasLineJoin,\n    lineCap: CanvasLineCap,\n    lineWidth: number,\n    movePrecision: number) {\n\n    this.lineCap = lineCap;\n    this.lineJoin = lineJoin;\n    this.lineWidth = lineWidth;\n    this.movePrecision = movePrecision;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lineJoin",
                        "type": "CanvasLineJoin",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lineCap",
                        "type": "CanvasLineCap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movePrecision",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "lineJoin",
                        "type": "CanvasLineJoin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lineCap",
                        "type": "CanvasLineCap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movePrecision",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "lineCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasLineCap",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lineJoin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasLineJoin",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lineWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "movePrecision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Logging",
            "id": "class-Logging-05fae8a164b64a8d70a69d2c5bd2d7aab637c935387ee3f3f4ffc6517f645425a89a615882e421a494806d24c8f630a67668317fb41285c764b7c54245f490d2",
            "file": "src/app/core/services/abstract/logging.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class Logging {\n  abstract traceObject(message: unknown): void;\n  abstract trace(message: string): void;\n  abstract debug(message: string): void;\n  abstract info(message: string): void;\n  abstract warn(message: string): void;\n  abstract error(message: string, error?: Error): void;\n  abstract fatal(message: string, error?: Error): void;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fatal",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trace",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "traceObject",
                    "args": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoggingMock",
            "id": "class-LoggingMock-3d36ffb65db0405db877e975d268ae788f43420e985ce3fa92627635fb4cfa5c731778a684a60e4b5337fab80572101a3e828958b16b5a2c329cb195789bdd04",
            "file": "src/app/shared/mocks/services/logging.mock.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Logging } from '@services/abstract/logging';\n\nexport class LoggingMock implements Logging {\n  traceObject(message: unknown): void {\n    console.trace(message);\n  }\n  trace(message: string): void {\n    console.trace(message);\n  }\n  debug(message: string): void {\n    console.debug(message);\n  }\n  info(message: string): void {\n    console.info(message);\n  }\n  warn(message: string): void {\n    console.warn(message);\n  }\n  error(message: string, error?: Error | undefined): void {\n    console.error(message);\n  }\n  fatal(message: string, error?: Error | undefined): void {\n    console.error(message);\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "Error | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "Error | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fatal",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "Error | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "Error | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trace",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "traceObject",
                    "args": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Logging"
            ]
        },
        {
            "name": "Offset",
            "id": "class-Offset-858d1806b41c4d3cda12ad26b863210bff27aba8e785e579e9dfa9cd6ab16d23899cd0e73e8c14101153245e27e81b1ec60ff3116c7b30aca06c24c6f24926bb",
            "file": "src/app/core/models/drawings/elements.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class Size {\n  height: number;\n  width: number;\n\n  constructor(\n    height: number,\n    width: number) {\n\n    this.height = height;\n    this.width = width;\n  }\n}\n\nexport class Offset {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n\n  constructor(\n    top: number = 0,\n    bottom: number = 0,\n    left: number = 0,\n    right: number = 0) {\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "top",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "bottom",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "left",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "right",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "top",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottom",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "left",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "right",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Operation",
            "id": "class-Operation-3b6f959b988f90cfd44ec1ddab728064077ee7746cc7c54758700000a66e8eac121e39d4b64be40cda679eda6935bdc70c4fe134353024575b7bc370d75b5028",
            "file": "src/app/core/backend-models/finance/operation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { OperationType } from '@enums/finance/operationType';\nimport { AuditableOperationCategory } from './operationCategory';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class OperationRequest {\n  name: string;\n  category: AuditableOperationCategory;\n  type: OperationType;\n  value: number;\n  date: Date;\n  accountId: Guid;\n\n\n  constructor(\n    name: string,\n    category: AuditableOperationCategory,\n    type: OperationType,\n    value: number,\n    date: Date,\n    accountId: Guid) {\n\n\n    this.name = name;\n    this.category = category;\n    this.type = type;\n    this.value = value;\n    this.accountId = accountId;\n    this.date = date;\n  }\n}\n\nexport class Operation\n  extends AuditableEntity\n  implements OperationRequest, IdentifiableEntity {\n\n  operationId: Guid;\n  name: string;\n  category: AuditableOperationCategory;\n  type: OperationType;\n  value: number;\n  date: Date;\n  accountId: Guid;\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    operationId: Guid,\n    name: string,\n    category: AuditableOperationCategory,\n    type: OperationType,\n    value: number,\n    date: Date,\n    accountId: Guid,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.operationId = operationId;\n    this.name = name;\n    this.category = category;\n    this.type = type;\n    this.value = value;\n    this.accountId = accountId;\n    this.date = date;\n  }\n\n  getId = (): Guid => this.operationId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "category",
                        "type": "AuditableOperationCategory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "OperationType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "category",
                        "type": "AuditableOperationCategory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "OperationType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuditableOperationCategory",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "getId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "operationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OperationType",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedById",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AuditableEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "OperationRequest",
                "IdentifiableEntity"
            ]
        },
        {
            "name": "OperationCategory",
            "id": "class-OperationCategory-c12061aac888816b19c7a53fa762a39dac0159b0605997c4d8bbb7a5b529a35acfa47199b29eec4bf0c42dc6fed2a6a9a08fcbe4a6aa26ed494f8c983dc7d799",
            "file": "src/app/core/backend-models/finance/operationCategory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class OperationCategoryRequest {\n  name: string;\n  color: string;\n\n  constructor(\n    name: string,\n    color: string) {\n\n    this.name = name;\n    this.color = color;\n  }\n}\n\nexport class OperationCategory\n  extends OperationCategoryRequest\n  implements IdentifiableEntity {\n\n  operationCategoryId: Guid;\n\n  constructor(\n    operationCategoryId: Guid,\n    name: string,\n    color: string) {\n\n    super(name, color);\n    this.operationCategoryId = operationCategoryId;\n  }\n\n  getUpdated(request: OperationCategoryRequest): OperationCategory {\n    const updated = {\n      ...this,\n      color: request.color,\n      name: request.name\n    }\n\n    return updated;\n  }\n\n  getId = (): Guid => this.operationCategoryId;\n}\n\nexport class AuditableOperationCategory\n  extends OperationCategory\n  implements AuditableEntity, IdentifiableEntity {\n\n  readonly ownerId: Guid;\n  readonly owner: string;\n  readonly createdDate: Date;\n\n  readonly lastModifiedById: Guid | null = null;\n  readonly lastModifiedBy: string | null = null\n  readonly lastModifiedDate: Date | null = null\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    operationId: Guid,\n    name: string,\n    color: string,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(operationId, name, color);\n\n    this.ownerId = ownerId;\n    this.owner = owner;\n    this.createdDate = createdDate;\n\n    this.lastModifiedById = lastModifiedById;\n    this.lastModifiedBy = lastModifiedBy;\n    this.lastModifiedDate = lastModifiedDate;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "operationCategoryId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "operationCategoryId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "getId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "operationCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "OperationCategoryRequest"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "OperationCategoryRequest"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getUpdated",
                    "args": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OperationCategory",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "OperationCategoryRequest",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IdentifiableEntity"
            ]
        },
        {
            "name": "OperationCategoryHandler",
            "id": "class-OperationCategoryHandler-093132a383b65d774bf888fd28aa30a17895c8497053edf925d38f4bb4223d39c7cf01d11d1bcbe6c10bcdc8303946efe5fe622ae36b71a77d17fee541b8aaa0",
            "file": "src/app/core/services/abstract/operationCategoryHandler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  AuditableOperationCategory,\n  OperationCategory,\n  OperationCategoryRequest\n} from '@backend-models/finance/operationCategory';\nimport { RepositoryHandler } from './repositoryHandler';\n\nexport abstract class OperationCategoryHandler\n  extends RepositoryHandler<\n    AuditableOperationCategory,\n    OperationCategory,\n    OperationCategoryRequest> {\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryHandler"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BaseResponse>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryHandler"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<[] | null>>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "RepositoryHandler"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T | null>>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryHandler"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "update",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RepositoryHandler"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "RepositoryHandler",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OperationCategoryRequest",
            "id": "class-OperationCategoryRequest-c12061aac888816b19c7a53fa762a39dac0159b0605997c4d8bbb7a5b529a35acfa47199b29eec4bf0c42dc6fed2a6a9a08fcbe4a6aa26ed494f8c983dc7d799",
            "file": "src/app/core/backend-models/finance/operationCategory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class OperationCategoryRequest {\n  name: string;\n  color: string;\n\n  constructor(\n    name: string,\n    color: string) {\n\n    this.name = name;\n    this.color = color;\n  }\n}\n\nexport class OperationCategory\n  extends OperationCategoryRequest\n  implements IdentifiableEntity {\n\n  operationCategoryId: Guid;\n\n  constructor(\n    operationCategoryId: Guid,\n    name: string,\n    color: string) {\n\n    super(name, color);\n    this.operationCategoryId = operationCategoryId;\n  }\n\n  getUpdated(request: OperationCategoryRequest): OperationCategory {\n    const updated = {\n      ...this,\n      color: request.color,\n      name: request.name\n    }\n\n    return updated;\n  }\n\n  getId = (): Guid => this.operationCategoryId;\n}\n\nexport class AuditableOperationCategory\n  extends OperationCategory\n  implements AuditableEntity, IdentifiableEntity {\n\n  readonly ownerId: Guid;\n  readonly owner: string;\n  readonly createdDate: Date;\n\n  readonly lastModifiedById: Guid | null = null;\n  readonly lastModifiedBy: string | null = null\n  readonly lastModifiedDate: Date | null = null\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    operationId: Guid,\n    name: string,\n    color: string,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(operationId, name, color);\n\n    this.ownerId = ownerId;\n    this.owner = owner;\n    this.createdDate = createdDate;\n\n    this.lastModifiedById = lastModifiedById;\n    this.lastModifiedBy = lastModifiedBy;\n    this.lastModifiedDate = lastModifiedDate;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OperationRequest",
            "id": "class-OperationRequest-3b6f959b988f90cfd44ec1ddab728064077ee7746cc7c54758700000a66e8eac121e39d4b64be40cda679eda6935bdc70c4fe134353024575b7bc370d75b5028",
            "file": "src/app/core/backend-models/finance/operation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { OperationType } from '@enums/finance/operationType';\nimport { AuditableOperationCategory } from './operationCategory';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class OperationRequest {\n  name: string;\n  category: AuditableOperationCategory;\n  type: OperationType;\n  value: number;\n  date: Date;\n  accountId: Guid;\n\n\n  constructor(\n    name: string,\n    category: AuditableOperationCategory,\n    type: OperationType,\n    value: number,\n    date: Date,\n    accountId: Guid) {\n\n\n    this.name = name;\n    this.category = category;\n    this.type = type;\n    this.value = value;\n    this.accountId = accountId;\n    this.date = date;\n  }\n}\n\nexport class Operation\n  extends AuditableEntity\n  implements OperationRequest, IdentifiableEntity {\n\n  operationId: Guid;\n  name: string;\n  category: AuditableOperationCategory;\n  type: OperationType;\n  value: number;\n  date: Date;\n  accountId: Guid;\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    operationId: Guid,\n    name: string,\n    category: AuditableOperationCategory,\n    type: OperationType,\n    value: number,\n    date: Date,\n    accountId: Guid,\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.operationId = operationId;\n    this.name = name;\n    this.category = category;\n    this.type = type;\n    this.value = value;\n    this.accountId = accountId;\n    this.date = date;\n  }\n\n  getId = (): Guid => this.operationId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "category",
                        "type": "AuditableOperationCategory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "OperationType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "category",
                        "type": "AuditableOperationCategory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "OperationType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuditableOperationCategory",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OperationType",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Paging",
            "id": "class-Paging-543adbe0304b0a9e672622f2e6f0995176503320b8b42375b566a1e8f5846e4b99e105437d2687425af4c52c62975f76fdcc1250e9f253682b04f4f0bf97d6c3",
            "file": "src/app/core/models/article/pagingData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PagingView {\n  pageIndex: number;\n  pagingRange: number[];\n  elementsRange: number[];\n  leftShiftDisabled: boolean;\n  rightShiftDisabled: boolean;\n\n  constructor(\n    pageIndex: number,\n    pagingRange: number[],\n    elementsRange: number[],\n    leftShiftDisabled: boolean,\n    rightShiftDisabled: boolean) {\n\n    this.pageIndex = pageIndex;\n    this.pagingRange = pagingRange;\n    this.elementsRange = elementsRange;\n    this.leftShiftDisabled = leftShiftDisabled;\n    this.rightShiftDisabled = rightShiftDisabled;\n  }\n}\n\nexport abstract class PagingBase {\n  abstract get pagingView(): PagingView;\n  abstract shiftPage: (shift: number) => void;\n}\n\nexport class Paging implements PagingBase {\n  private _pageIndex: number = 1;\n  private _totalPages: number;\n\n  private _pageBarOffset: number;\n  private _elementsPerPage: number;\n\n  private _pagingRange: number[];\n  private _elementsRange: number[];\n\n  private _leftShiftDisabled: boolean;\n  private _rightShiftDisabled: boolean;\n\n\n  get pagingView(): PagingView {\n    return ({\n      pageIndex: this._pageIndex,\n      pagingRange: this._pagingRange,\n      elementsRange: this._elementsRange,\n      leftShiftDisabled: this._leftShiftDisabled,\n      rightShiftDisabled: this._rightShiftDisabled\n    })\n  }\n\n  constructor(\n    totalElements: number,\n    elementsPerPage: number,\n    pageBarOffset: number) {\n\n    if (totalElements == null) {\n      throw new Error('Total elements cannot be null.');\n    }\n    if (elementsPerPage === 0) {\n      throw new Error('Elements per page cannot be null.');\n    }\n    if (pageBarOffset == null) {\n      throw new Error('Page bar offset cannot be null.');\n    }\n\n    this._elementsPerPage = elementsPerPage;\n    this._pageBarOffset = pageBarOffset;\n\n    this._totalPages = Math.ceil(totalElements / elementsPerPage);\n\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  shiftPage(shift: number) {\n    if (shift === 0) {\n      return;\n    }\n\n    const index = this._pageIndex + shift;\n    if (index < 0 || index > this._totalPages) {\n      throw new Error('Invalid page index.');\n    }\n\n    this._pageIndex = index;\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, this._elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  private static isRightShiftDisabled = (\n    pagingRange: number[],\n    totalPages: number) =>\n    pagingRange.length > 0\n    && pagingRange[pagingRange.length - 1] === totalPages;;\n\n  private static isLeftShiftDisabled = (pagingRange: number[]) =>\n    pagingRange.length > 0 && pagingRange[0] === 1;\n\n  private static getPagingRange = (\n    pageIndex: number,\n    pageBarOffset: number,\n    totalPages: number\n  ): number[] => {\n\n    const pagingRange = 1 + pageBarOffset * 2;\n\n    if (pagingRange >= totalPages) {\n      return this.fillNumberArray(1, totalPages);\n    }\n\n    const leftBorder = pageIndex - pageBarOffset;\n    if (leftBorder <= 0) {\n      const minimizedLeftOffset = pageBarOffset - (0 - leftBorder + 1);\n      const pagingStart = pageIndex - minimizedLeftOffset;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    const rightBorder = pageIndex + pageBarOffset;\n    if (rightBorder > totalPages) {\n      const leftAddUp = rightBorder - totalPages;\n      const pagingStart = pageIndex - pageBarOffset - leftAddUp;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    return this.fillNumberArray(leftBorder, pagingRange);\n  }\n\n  private static getElementsRange = (\n    pageIndex: number,\n    elementsPerPage: number\n  ): number[] => {\n\n    const startIndex = (pageIndex - 1) * elementsPerPage\n    const indexRange = Paging.fillNumberArray(startIndex, elementsPerPage);\n\n    return indexRange;\n  }\n\n  private static fillNumberArray = (start: number, length: number) =>\n    [...Array(length)].map((_, i) => start + i);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "totalElements",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementsPerPage",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageBarOffset",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "totalElements",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementsPerPage",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageBarOffset",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_elementsRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_leftShiftDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pageBarOffset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pageIndex",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pagingRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_rightShiftDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "fillNumberArray",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "getElementsRange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "getPagingRange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "isLeftShiftDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "isRightShiftDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "shiftPage",
                    "args": [
                        {
                            "name": "shift",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shift",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "pagingView": {
                    "name": "pagingView",
                    "getSignature": {
                        "name": "pagingView",
                        "type": "",
                        "returnType": "PagingView",
                        "line": 42
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "PagingBase"
            ]
        },
        {
            "name": "PagingBase",
            "id": "class-PagingBase-543adbe0304b0a9e672622f2e6f0995176503320b8b42375b566a1e8f5846e4b99e105437d2687425af4c52c62975f76fdcc1250e9f253682b04f4f0bf97d6c3",
            "file": "src/app/core/models/article/pagingData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PagingView {\n  pageIndex: number;\n  pagingRange: number[];\n  elementsRange: number[];\n  leftShiftDisabled: boolean;\n  rightShiftDisabled: boolean;\n\n  constructor(\n    pageIndex: number,\n    pagingRange: number[],\n    elementsRange: number[],\n    leftShiftDisabled: boolean,\n    rightShiftDisabled: boolean) {\n\n    this.pageIndex = pageIndex;\n    this.pagingRange = pagingRange;\n    this.elementsRange = elementsRange;\n    this.leftShiftDisabled = leftShiftDisabled;\n    this.rightShiftDisabled = rightShiftDisabled;\n  }\n}\n\nexport abstract class PagingBase {\n  abstract get pagingView(): PagingView;\n  abstract shiftPage: (shift: number) => void;\n}\n\nexport class Paging implements PagingBase {\n  private _pageIndex: number = 1;\n  private _totalPages: number;\n\n  private _pageBarOffset: number;\n  private _elementsPerPage: number;\n\n  private _pagingRange: number[];\n  private _elementsRange: number[];\n\n  private _leftShiftDisabled: boolean;\n  private _rightShiftDisabled: boolean;\n\n\n  get pagingView(): PagingView {\n    return ({\n      pageIndex: this._pageIndex,\n      pagingRange: this._pagingRange,\n      elementsRange: this._elementsRange,\n      leftShiftDisabled: this._leftShiftDisabled,\n      rightShiftDisabled: this._rightShiftDisabled\n    })\n  }\n\n  constructor(\n    totalElements: number,\n    elementsPerPage: number,\n    pageBarOffset: number) {\n\n    if (totalElements == null) {\n      throw new Error('Total elements cannot be null.');\n    }\n    if (elementsPerPage === 0) {\n      throw new Error('Elements per page cannot be null.');\n    }\n    if (pageBarOffset == null) {\n      throw new Error('Page bar offset cannot be null.');\n    }\n\n    this._elementsPerPage = elementsPerPage;\n    this._pageBarOffset = pageBarOffset;\n\n    this._totalPages = Math.ceil(totalElements / elementsPerPage);\n\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  shiftPage(shift: number) {\n    if (shift === 0) {\n      return;\n    }\n\n    const index = this._pageIndex + shift;\n    if (index < 0 || index > this._totalPages) {\n      throw new Error('Invalid page index.');\n    }\n\n    this._pageIndex = index;\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, this._elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  private static isRightShiftDisabled = (\n    pagingRange: number[],\n    totalPages: number) =>\n    pagingRange.length > 0\n    && pagingRange[pagingRange.length - 1] === totalPages;;\n\n  private static isLeftShiftDisabled = (pagingRange: number[]) =>\n    pagingRange.length > 0 && pagingRange[0] === 1;\n\n  private static getPagingRange = (\n    pageIndex: number,\n    pageBarOffset: number,\n    totalPages: number\n  ): number[] => {\n\n    const pagingRange = 1 + pageBarOffset * 2;\n\n    if (pagingRange >= totalPages) {\n      return this.fillNumberArray(1, totalPages);\n    }\n\n    const leftBorder = pageIndex - pageBarOffset;\n    if (leftBorder <= 0) {\n      const minimizedLeftOffset = pageBarOffset - (0 - leftBorder + 1);\n      const pagingStart = pageIndex - minimizedLeftOffset;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    const rightBorder = pageIndex + pageBarOffset;\n    if (rightBorder > totalPages) {\n      const leftAddUp = rightBorder - totalPages;\n      const pagingStart = pageIndex - pageBarOffset - leftAddUp;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    return this.fillNumberArray(leftBorder, pagingRange);\n  }\n\n  private static getElementsRange = (\n    pageIndex: number,\n    elementsPerPage: number\n  ): number[] => {\n\n    const startIndex = (pageIndex - 1) * elementsPerPage\n    const indexRange = Paging.fillNumberArray(startIndex, elementsPerPage);\n\n    return indexRange;\n  }\n\n  private static fillNumberArray = (start: number, length: number) =>\n    [...Array(length)].map((_, i) => start + i);\n}\n",
            "properties": [
                {
                    "name": "shiftPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "pagingView": {
                    "name": "pagingView",
                    "getSignature": {
                        "name": "pagingView",
                        "type": "",
                        "returnType": "PagingView",
                        "line": 24
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagingView",
            "id": "class-PagingView-543adbe0304b0a9e672622f2e6f0995176503320b8b42375b566a1e8f5846e4b99e105437d2687425af4c52c62975f76fdcc1250e9f253682b04f4f0bf97d6c3",
            "file": "src/app/core/models/article/pagingData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PagingView {\n  pageIndex: number;\n  pagingRange: number[];\n  elementsRange: number[];\n  leftShiftDisabled: boolean;\n  rightShiftDisabled: boolean;\n\n  constructor(\n    pageIndex: number,\n    pagingRange: number[],\n    elementsRange: number[],\n    leftShiftDisabled: boolean,\n    rightShiftDisabled: boolean) {\n\n    this.pageIndex = pageIndex;\n    this.pagingRange = pagingRange;\n    this.elementsRange = elementsRange;\n    this.leftShiftDisabled = leftShiftDisabled;\n    this.rightShiftDisabled = rightShiftDisabled;\n  }\n}\n\nexport abstract class PagingBase {\n  abstract get pagingView(): PagingView;\n  abstract shiftPage: (shift: number) => void;\n}\n\nexport class Paging implements PagingBase {\n  private _pageIndex: number = 1;\n  private _totalPages: number;\n\n  private _pageBarOffset: number;\n  private _elementsPerPage: number;\n\n  private _pagingRange: number[];\n  private _elementsRange: number[];\n\n  private _leftShiftDisabled: boolean;\n  private _rightShiftDisabled: boolean;\n\n\n  get pagingView(): PagingView {\n    return ({\n      pageIndex: this._pageIndex,\n      pagingRange: this._pagingRange,\n      elementsRange: this._elementsRange,\n      leftShiftDisabled: this._leftShiftDisabled,\n      rightShiftDisabled: this._rightShiftDisabled\n    })\n  }\n\n  constructor(\n    totalElements: number,\n    elementsPerPage: number,\n    pageBarOffset: number) {\n\n    if (totalElements == null) {\n      throw new Error('Total elements cannot be null.');\n    }\n    if (elementsPerPage === 0) {\n      throw new Error('Elements per page cannot be null.');\n    }\n    if (pageBarOffset == null) {\n      throw new Error('Page bar offset cannot be null.');\n    }\n\n    this._elementsPerPage = elementsPerPage;\n    this._pageBarOffset = pageBarOffset;\n\n    this._totalPages = Math.ceil(totalElements / elementsPerPage);\n\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  shiftPage(shift: number) {\n    if (shift === 0) {\n      return;\n    }\n\n    const index = this._pageIndex + shift;\n    if (index < 0 || index > this._totalPages) {\n      throw new Error('Invalid page index.');\n    }\n\n    this._pageIndex = index;\n    this._pagingRange =\n      Paging.getPagingRange(\n        this._pageIndex,\n        this._pageBarOffset,\n        this._totalPages\n      );\n    this._elementsRange =\n      Paging.getElementsRange(this._pageIndex, this._elementsPerPage);\n\n    this._leftShiftDisabled =\n      Paging.isLeftShiftDisabled(this._pagingRange);\n    this._rightShiftDisabled =\n      Paging.isRightShiftDisabled(this._pagingRange, this._totalPages);\n  }\n\n  private static isRightShiftDisabled = (\n    pagingRange: number[],\n    totalPages: number) =>\n    pagingRange.length > 0\n    && pagingRange[pagingRange.length - 1] === totalPages;;\n\n  private static isLeftShiftDisabled = (pagingRange: number[]) =>\n    pagingRange.length > 0 && pagingRange[0] === 1;\n\n  private static getPagingRange = (\n    pageIndex: number,\n    pageBarOffset: number,\n    totalPages: number\n  ): number[] => {\n\n    const pagingRange = 1 + pageBarOffset * 2;\n\n    if (pagingRange >= totalPages) {\n      return this.fillNumberArray(1, totalPages);\n    }\n\n    const leftBorder = pageIndex - pageBarOffset;\n    if (leftBorder <= 0) {\n      const minimizedLeftOffset = pageBarOffset - (0 - leftBorder + 1);\n      const pagingStart = pageIndex - minimizedLeftOffset;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    const rightBorder = pageIndex + pageBarOffset;\n    if (rightBorder > totalPages) {\n      const leftAddUp = rightBorder - totalPages;\n      const pagingStart = pageIndex - pageBarOffset - leftAddUp;\n      return this.fillNumberArray(pagingStart, pagingRange);\n    }\n\n    return this.fillNumberArray(leftBorder, pagingRange);\n  }\n\n  private static getElementsRange = (\n    pageIndex: number,\n    elementsPerPage: number\n  ): number[] => {\n\n    const startIndex = (pageIndex - 1) * elementsPerPage\n    const indexRange = Paging.fillNumberArray(startIndex, elementsPerPage);\n\n    return indexRange;\n  }\n\n  private static fillNumberArray = (start: number, length: number) =>\n    [...Array(length)].map((_, i) => start + i);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pageIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pagingRange",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementsRange",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leftShiftDisabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rightShiftDisabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "pageIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pagingRange",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementsRange",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leftShiftDisabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rightShiftDisabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "elementsRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "leftShiftDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pagingRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rightShiftDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PiggyBank",
            "id": "class-PiggyBank-15f0abf4556ac1c4996227c2bcc8af6d1572487b60576f0692384c0ca12030f993c91afc609f0ae87b856eb6257f2465bf95bb240406b5c48dc3709940d66f40",
            "file": "src/app/core/backend-models/finance/piggyBank.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AccountRequest } from './account';\nimport { Operation } from './operation';\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class PiggyBankRequest extends AccountRequest {\n  targetValue: number;\n\n  constructor(\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = [],\n    targetValue: number) {\n\n    super(\n      name,\n      currentValue,\n      userId,\n      operations);\n\n    this.targetValue = targetValue;\n  }\n}\n\nexport class PiggyBank\n  extends AuditableEntity\n  implements PiggyBankRequest, IdentifiableEntity {\n\n  piggyBankId: Guid;\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  targetValue: number;\n  operations: Operation[];\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    accountId: Guid,\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    targetValue: number,\n    operations: Operation[] = [],\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.piggyBankId = accountId;\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.targetValue = targetValue;\n    this.operations = operations;\n  }\n\n  getId = (): Guid => this.piggyBankId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "targetValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "ownerId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "owner",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targetValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedById",
                        "type": "Guid | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "getId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "operations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Operation[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "piggyBankId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "targetValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedById",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "lastModifiedDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "AuditableEntity"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AuditableEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "PiggyBankRequest",
                "IdentifiableEntity"
            ]
        },
        {
            "name": "PiggyBankRequest",
            "id": "class-PiggyBankRequest-15f0abf4556ac1c4996227c2bcc8af6d1572487b60576f0692384c0ca12030f993c91afc609f0ae87b856eb6257f2465bf95bb240406b5c48dc3709940d66f40",
            "file": "src/app/core/backend-models/finance/piggyBank.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\nimport { AccountRequest } from './account';\nimport { Operation } from './operation';\nimport { AuditableEntity } from '@backend-models/auditableEntity';\nimport { IdentifiableEntity } from '@models/identifiableEntity';\n\nexport class PiggyBankRequest extends AccountRequest {\n  targetValue: number;\n\n  constructor(\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    operations: Operation[] = [],\n    targetValue: number) {\n\n    super(\n      name,\n      currentValue,\n      userId,\n      operations);\n\n    this.targetValue = targetValue;\n  }\n}\n\nexport class PiggyBank\n  extends AuditableEntity\n  implements PiggyBankRequest, IdentifiableEntity {\n\n  piggyBankId: Guid;\n  name: string;\n  currentValue: number;\n  userId: Guid;\n  targetValue: number;\n  operations: Operation[];\n\n  constructor(\n    ownerId: Guid,\n    owner: string,\n    createdDate: Date,\n\n    accountId: Guid,\n    name: string,\n    currentValue: number,\n    userId: Guid,\n    targetValue: number,\n    operations: Operation[] = [],\n\n    lastModifiedById: Guid | null = null,\n    lastModifiedBy: string | null = null,\n    lastModifiedDate: Date | null = null) {\n\n    super(\n      ownerId,\n      owner,\n      createdDate,\n      lastModifiedById,\n      lastModifiedBy,\n      lastModifiedDate);\n\n    this.piggyBankId = accountId;\n    this.name = name;\n    this.currentValue = currentValue;\n    this.userId = userId;\n    this.targetValue = targetValue;\n    this.operations = operations;\n  }\n\n  getId = (): Guid => this.piggyBankId;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "targetValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operations",
                        "type": "Operation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targetValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "targetValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AccountRequest"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AccountRequest"
                    }
                },
                {
                    "name": "operations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Operation[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AccountRequest"
                    }
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AccountRequest"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AccountRequest",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Point",
            "id": "class-Point-858d1806b41c4d3cda12ad26b863210bff27aba8e785e579e9dfa9cd6ab16d23899cd0e73e8c14101153245e27e81b1ec60ff3116c7b30aca06c24c6f24926bb",
            "file": "src/app/core/models/drawings/elements.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class Size {\n  height: number;\n  width: number;\n\n  constructor(\n    height: number,\n    width: number) {\n\n    this.height = height;\n    this.width = width;\n  }\n}\n\nexport class Offset {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n\n  constructor(\n    top: number = 0,\n    bottom: number = 0,\n    left: number = 0,\n    right: number = 0) {\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RepeatingOperation",
            "id": "class-RepeatingOperation-6eb30098f62caa3cb6b2e4da2fc492fd2f4ea925621234ecd2d2da307146c442d671e884b88f23e4e5a6e850db4f53d13f8a98a3716adfc1d597b56343e07f94",
            "file": "src/app/core/backend-models/finance/repeatingOperation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\n\n// TODO: think how to implement model better\nexport class RepeatingOperation {\n  operationId: Guid;\n  name: string;\n  value: number;\n  repeatDay: number;\n\n  constructor(\n    repeatingOperationId: Guid,\n    name: string,\n    value: number,\n    repeatDay: number) {\n\n    this.operationId = repeatingOperationId;\n    this.repeatDay = repeatDay;\n    this.name = name;\n    this.value = value;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repeatingOperationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "repeatDay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "repeatingOperationId",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "repeatDay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "operationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "repeatDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RepositoryHandler",
            "id": "class-RepositoryHandler-07c49201e4caaf462cccc5aa15491168e22113b7e04369932bb127955764dbc7f5daf3900212f8bb413e650f4720633537d7e4a3e505aedc4d8fcdc13750fb76",
            "file": "src/app/core/services/abstract/repositoryHandler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\nimport { Observable } from 'rxjs';\n\nimport { BaseResponse, ValueResponse } from '@backend-models/baseResponse';\nimport { ValidatedResponse } from '@backend-models/validatedResponse';\n\nexport abstract class RepositoryHandler<T, P, R> {\n  abstract getById(id: Guid): Observable<ValueResponse<T | null>>;\n  abstract getAll(): Observable<ValueResponse<T[] | null>>;\n  abstract add(request: R): Observable<ValidatedResponse<T>>;\n  abstract update(update: P): Observable<ValidatedResponse<T>>;\n  abstract delete(id: Guid): Observable<BaseResponse>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BaseResponse>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<[] | null>>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValueResponse<T | null>>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "update",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidatedResponse<T>>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "P",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RuntimeConfiguration",
            "id": "class-RuntimeConfiguration-269efe641cc99d464cacfe693c2f9baf818e5d504fb95ceb22589b7c11eb791c588b8b56d42893bf8de7903fb82bc99e249d5d8bcbb1b7e8c0cfe75dd03ed7e1",
            "file": "src/app/core/models/appConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LogLevel } from '@enums/logLevel';\n\nexport class RuntimeConfiguration {\n  apiBaseUrl: string;\n  logLevel: LogLevel;\n\n  constructor(\n    apiBaseUrl: string,\n    logLevel: LogLevel) {\n\n    this.apiBaseUrl = apiBaseUrl;\n    this.logLevel = logLevel;\n  }\n}\n\nexport class AppConfiguration {\n  timeouts: TimeoutConfiguration;\n  apiPaths: ApiConfiguration;\n  article: ArticleConfiguration;\n\n  constructor(\n    article: ArticleConfiguration,\n    apiPaths: ApiConfiguration,\n    timeouts: TimeoutConfiguration) {\n    this.article = article;\n    this.apiPaths = apiPaths;\n    this.timeouts = timeouts;\n  }\n}\n\nexport class ArticleConfiguration {\n  defaultArticleId: string;\n  defaultListLimit: number;\n\n  constructor(\n    defaultArticleId: string,\n    defaultListLimit: number) {\n    this.defaultArticleId = defaultArticleId;\n    this.defaultListLimit = defaultListLimit;\n  }\n}\n\nexport class TimeoutConfiguration {\n  requestTimeout: number;\n\n  constructor(\n    requestTimeout: number) {\n    this.requestTimeout = requestTimeout;\n  }\n}\n\nexport class ApiConfiguration {\n  articleUrl: string;\n  listUrl: string;\n  operationCategory: string;\n\n  constructor(\n    articleUrl: string,\n    listUrl: string,\n    operationCategory: string) {\n\n    this.articleUrl = articleUrl;\n    this.listUrl = listUrl;\n    this.operationCategory = operationCategory;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiBaseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logLevel",
                        "type": "LogLevel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "apiBaseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logLevel",
                        "type": "LogLevel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "apiBaseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "logLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogLevel",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Size",
            "id": "class-Size-858d1806b41c4d3cda12ad26b863210bff27aba8e785e579e9dfa9cd6ab16d23899cd0e73e8c14101153245e27e81b1ec60ff3116c7b30aca06c24c6f24926bb",
            "file": "src/app/core/models/drawings/elements.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class Size {\n  height: number;\n  width: number;\n\n  constructor(\n    height: number,\n    width: number) {\n\n    this.height = height;\n    this.width = width;\n  }\n}\n\nexport class Offset {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n\n  constructor(\n    top: number = 0,\n    bottom: number = 0,\n    left: number = 0,\n    right: number = 0) {\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "height",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "height",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimeoutConfiguration",
            "id": "class-TimeoutConfiguration-269efe641cc99d464cacfe693c2f9baf818e5d504fb95ceb22589b7c11eb791c588b8b56d42893bf8de7903fb82bc99e249d5d8bcbb1b7e8c0cfe75dd03ed7e1",
            "file": "src/app/core/models/appConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LogLevel } from '@enums/logLevel';\n\nexport class RuntimeConfiguration {\n  apiBaseUrl: string;\n  logLevel: LogLevel;\n\n  constructor(\n    apiBaseUrl: string,\n    logLevel: LogLevel) {\n\n    this.apiBaseUrl = apiBaseUrl;\n    this.logLevel = logLevel;\n  }\n}\n\nexport class AppConfiguration {\n  timeouts: TimeoutConfiguration;\n  apiPaths: ApiConfiguration;\n  article: ArticleConfiguration;\n\n  constructor(\n    article: ArticleConfiguration,\n    apiPaths: ApiConfiguration,\n    timeouts: TimeoutConfiguration) {\n    this.article = article;\n    this.apiPaths = apiPaths;\n    this.timeouts = timeouts;\n  }\n}\n\nexport class ArticleConfiguration {\n  defaultArticleId: string;\n  defaultListLimit: number;\n\n  constructor(\n    defaultArticleId: string,\n    defaultListLimit: number) {\n    this.defaultArticleId = defaultArticleId;\n    this.defaultListLimit = defaultListLimit;\n  }\n}\n\nexport class TimeoutConfiguration {\n  requestTimeout: number;\n\n  constructor(\n    requestTimeout: number) {\n    this.requestTimeout = requestTimeout;\n  }\n}\n\nexport class ApiConfiguration {\n  articleUrl: string;\n  listUrl: string;\n  operationCategory: string;\n\n  constructor(\n    articleUrl: string,\n    listUrl: string,\n    operationCategory: string) {\n\n    this.articleUrl = articleUrl;\n    this.listUrl = listUrl;\n    this.operationCategory = operationCategory;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "requestTimeout",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "requestTimeout",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "requestTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ValidationError",
            "id": "class-ValidationError-48d883b8e0cfe47fc0b8b88e359e9e0246c2a4a2e061c1a53ed74b6741714cd451f4000250c9779b7bcab59c6c4c0501c1d682dce5835b31929b7a87cb94bc9a",
            "file": "src/app/core/backend-models/validationError.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ValidationError {\n  propertyName: string;\n  errorMessage: string | null;\n  attemptedValue: number;\n\n  constructor(\n    propertyName: string,\n    errorMessage: string,\n    attemptedValue: number) {\n\n    this.propertyName = propertyName;\n    this.errorMessage = errorMessage;\n    this.attemptedValue = attemptedValue;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "propertyName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attemptedValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "propertyName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attemptedValue",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "attemptedValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "propertyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-f14084246228b0114eb4e5397468f8a6b392ed0ac2fc22471c59a74720454b4bd17930f33b60e1faf06970b3a4d95181df4a066b65415de696927810ae55e324",
            "file": "src/app/features/finance/account/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-account",
            "styleUrls": [
                "./account.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>account works!</p>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-785720d88c52c4c1009c97a084b3c26052da0aff93fbf1bad49620c44aca15c6500b833b54d868a0f001c3851cfae6b85d11eeba88a53649ac4831e7ae36628e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getRouterState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "routerState",
                    "defaultValue": "RemoteRouterState.Unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RemoteRouterState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  Event,\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router\n} from '@angular/router';\nimport { RemoteRouterState } from '@enums/remoteRouterState';\n\n@Component({\n  selector: 'svd-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  routerState: RemoteRouterState = RemoteRouterState.Unknown;\n\n  constructor(private router: Router) {\n    this.router.events.subscribe(\n      (event: Event) => this.getRouterState(event));\n  }\n\n  private getRouterState = (event: Event): RemoteRouterState => {\n    if (event instanceof NavigationStart) {\n      this.routerState = RemoteRouterState.Start;\n    }\n    if (event instanceof NavigationEnd) {\n      this.routerState = RemoteRouterState.End;\n    }\n    if (event instanceof NavigationCancel) {\n      this.routerState = RemoteRouterState.Cancel;\n    }\n    if (event instanceof NavigationError) {\n      this.routerState = RemoteRouterState.Error;\n    }\n\n    return RemoteRouterState.Unknown;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<svd-layout class=\"h-100\">\n\n  <svd-remote-state-wrapper class=\"h-100\"\n                            [state]=\"routerState\">\n    <router-outlet></router-outlet>\n  </svd-remote-state-wrapper>\n\n</svd-layout>\n"
        },
        {
            "name": "ArticleComponent",
            "id": "component-ArticleComponent-de9d73cc1d0aa0e5d2e907532e736e9168eecc6b7183d26d8c2d460ab10e4e31d59082037444f509af12d9e64b7ce238a84509cebbe10d06fd6d582c268414a6",
            "file": "src/app/features/article/article.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-article",
            "styleUrls": [
                "./article.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./article.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "article",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Article | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Article } from 'src/app/core/backend-models/article';\n\n@Component({\n  selector: 'svd-article',\n  templateUrl: './article.component.html',\n  styleUrls: ['./article.component.css']\n})\nexport class ArticleComponent implements OnInit {\n  article: Article | null = null;\n\n  constructor(\n    private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.article = this.route.snapshot.data.article as Article ?? null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\np {\n  margin: 2.5rem 0\n}\n\nsvd-image {\n  margin-bottom: 2.5em;\n}\n",
                    "styleUrl": "./article.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"article == null else articleTemplate\">\n  Could not load article.\n</ng-container>\n\n<ng-template #articleTemplate>\n  <h1 class=\"text-center\"\n      tabindex=\"0\"\n      [attr.aria-label]=\"article!.title\">\n    {{article!.title}}\n  </h1>\n\n  <div tabindex=\"0\"\n       class=\"intro\"\n       [innerHTML]=\"article!.intro\">\n  </div>\n\n  <svd-image [image]=\"article!.image\"></svd-image>\n\n  <div tabindex=\"0\"\n       [innerHTML]=\"article!.body\">\n  </div>\n\n  <svd-chip tabindex=\"0\"\n            *ngFor=\"let tag of (article!.tags  || []) | removeEmptyEntries\"\n            [title]=\"tag\">\n  </svd-chip>\n</ng-template>\n"
        },
        {
            "name": "ArticleListComponent",
            "id": "component-ArticleListComponent-f96a16146038ab84dcfc9d9594cef79944c4bd304e76716a8f93db5f1c89309922a0138576da509d015021b1d862c5928b8692dfe94534293b61d9e4955b2037",
            "file": "src/app/features/article/list/article-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-article-list",
            "styleUrls": [
                "./article-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./article-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "elementsPerPage",
                    "defaultValue": "9",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageBarOffset",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AppRouts",
                    "defaultValue": "AppRouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "columnData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnData<Article>[] | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "columnsStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ColumnData[]> | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "paging",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Paging | null",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "pagingStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Paging> | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "records",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Article[] | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "recordsStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Article[]> | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "createColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "ColumnData[]",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Article } from '@backend-models/article';\nimport { ArticleList } from '@backend-models/articleList';\nimport { Paging } from '@models/article/pagingData';\nimport { ColumnData } from '@models/article/tableData';\nimport {\n  sortObjectNumberField,\n  sortObjectStringField\n} from '@shared/utilities/sorting';\nimport { AppRouts } from '@enums/appRouts';\n\n@Component({\n  selector: 'svd-article-list',\n  templateUrl: './article-list.component.html',\n  styleUrls: ['./article-list.component.css']\n})\nexport class ArticleListComponent implements OnInit {\n  AppRouts = AppRouts;\n\n  @Input() elementsPerPage: number = 9;\n  @Input() pageBarOffset: number = 2;\n\n  records: Article[] | null = null;\n  recordsStream: Observable<Article[]> | null = null;\n\n  columnData: ColumnData<Article>[] | null = null;\n  columnsStream: Observable<ColumnData<Article>[]> | null = null;\n\n  paging: Paging | null = null;\n  pagingStream: Observable<Paging> | null = null;\n\n  constructor(\n    private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    const articleLst =\n      this.route.snapshot.data.articleLst as ArticleList ?? null;\n    this.records = articleLst?.list;\n    this.recordsStream = of(this.records);\n\n    this.columnData = this.createColumns();\n    this.columnsStream = of(this.columnData);\n\n    this.paging = new Paging(\n      this.records.length,\n      this.elementsPerPage,\n      this.pageBarOffset);\n    this.pagingStream = of(this.paging);\n  }\n\n  private createColumns(): ColumnData<Article>[] {\n    const firstName = new ColumnData<Article>(\n      'First name',\n      20,\n      false,\n      (article: Article) => article.firstname ?? '',\n      sortObjectStringField(\n        (article: Article) => article.firstname)\n    );\n    const surname = new ColumnData<Article>(\n      'Surname',\n      20,\n      false,\n      (article: Article) => article.surname ?? '',\n      sortObjectStringField((article: Article) => article.surname)\n    );\n\n    const gender = new ColumnData<Article>(\n      'Sex',\n      20,\n      false,\n      (article: Article) => article?.sex ?? '',\n      sortObjectStringField((article: Article) => article.sex)\n    );\n\n    const personalCode = new ColumnData<Article>(\n      'Personal code',\n      20,\n      false,\n      (article: Article) =>\n        article?.personal_code?.toString() ?? '',\n      sortObjectNumberField((article: Article) =>\n        article?.personal_code)\n    );\n\n    const phone = new ColumnData<Article>(\n      'Phone',\n      20,\n      true,\n      (article: Article) => article?.phone ?? ''\n    );\n\n    return [firstName, surname, gender, personalCode, phone];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab {\n  display: flex;\n  white-space: pre-wrap;\n}\n\n.tab .image {\n  width: 12.5rem;\n  height: 12.5rem;\n  flex-shrink: 0;\n  flex-grow: 0;\n  background: center center no-repeat;\n  background-size: cover;\n  margin: .375rem;\n  background-color: var(--svd-selectedRowBackground);\n}\n\n.tab .article-body {\n  padding-left: 1rem\n}\n\n.tab .article-body p {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n}\n\n.tab .article-body p:not(:first-child) {\n  display: none;\n}\n\n.tab .article-body {\n  margin-right: 2em;\n}\n\n.tab .article-body p:first-child {\n  margin-top: 0;\n}\n\n.tab .article-body p:last-child {\n  margin-bottom: 0;\n}\n\n[svd-button] {\n  margin-top: 20px\n}\n",
                    "styleUrl": "./article-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"text-center\">List</h1>\n\n<svd-table [recordsStream]=\"recordsStream\"\n           [columnsStream]=\"columnsStream\"\n           [pagingStream]=\"pagingStream\"\n           [detailTemplate]=\"articleDetails\"></svd-table>\n\n\n<ng-template #articleDetails\n             let-article=\"record\">\n  <div class=\"tab\">\n    <div role=\"img\"\n         tabindex=\"0\"\n         class=\"image\"\n         title=\"{{article}}\"\n         [style.background-image]=\"\n                                article.image!.medium | urlAsBackgroundImage\">\n    </div>\n    <div class=\"article-body\">\n      <p class=\"text-center mt-2\">{{article.body | firstParagraph}}</p>\n      <div class=\"d-flex justify-content-end w-100\">\n        <a svd-button\n           class=\"btn btn-sm sharp uppercase\"\n           routerlinkactive=\"active\"\n           routerLink=\"/{{AppRouts.Article}}/{{article.id}}\">Read more</a>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-af656d934697dc59026590d853a70f57ab8824a39ca90f2d10136d52a45b298888bdcb653cf2c1c1719fb65d3ae055601687c808a2bc2cb39cebb152c0fbfb22",
            "file": "src/app/shared/chip/chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-chip",
            "styleUrls": [
                "./chip.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'svd-chip',\n  templateUrl: './chip.component.html',\n  styleUrls: ['./chip.component.css']\n})\nexport class ChipComponent {\n  @Input() title: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".svd.badge {\n  background: var(--svd-secondaryColor);\n}\n",
                    "styleUrl": "./chip.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<span class=\"svd badge rounded-pill p-2\">{{title}}</span>\n"
        },
        {
            "name": "DefaultContentComponent",
            "id": "component-DefaultContentComponent-846aa4e35870b24b0e4c57c36e4b8a2fd511daff0cf4080cb8442119338255fdf3b8e63600f8550c5768a22e5328e648d12b466640b2c854f0da90be30e1d784",
            "file": "src/app/layout/default-content/default-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-default-content",
            "styleUrls": [
                "./default-content.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./default-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-default-content',\n  templateUrl: './default-content.component.html',\n  styleUrls: ['./default-content.component.css']\n})\nexport class DefaultContentComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  color: var(--svd-secondaryColor);\n}\n\n",
                    "styleUrl": "./default-content.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"h-100 d-flex flex-column justify-content-center align-items-center text-center\">\n\n  <h1>Svedera Sandbox</h1>\n  <p>Here should be some description</p>\n\n</div>\n"
        },
        {
            "name": "DrawingsComponent",
            "id": "component-DrawingsComponent-740e6533474362f0001c853f30fd0b30e3d223d0a3d776b18ba964276010d38c5713f1da0255d0bf882b026093785c15279afb8873398db6e1b2923044c9b7d0",
            "file": "src/app/features/drawings/drawings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-drawings",
            "styleUrls": [
                "./drawings.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./drawings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-drawings',\n  templateUrl: './drawings.component.html',\n  styleUrls: ['./drawings.component.css']\n})\nexport class DrawingsComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".canvas-container {\n  border: dashed var(--svd-border-color);\n}\n",
                    "styleUrl": "./drawings.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"d-flex h-100 w-100\">\n\n  <svd-left-toolbar></svd-left-toolbar>\n\n  <div class=\"flex-fill\">\n    <div class=\"d-flex justify-content-center\">\n      <svd-scene class=\"canvas-container\"></svd-scene>\n    </div>\n  </div>\n\n  <svd-right-toolbar></svd-right-toolbar>\n\n</div>\n"
        },
        {
            "name": "FinanceDashboardComponent",
            "id": "component-FinanceDashboardComponent-835fce16586234a5711d0818d1bf530073c66ad26a28818f28329fac3d48a5c66e5a6f7beb121a23f2d46cd132be1386f8e985f64149d5008b0b965461ac625a",
            "file": "src/app/features/finance/finance-dashboard/finance-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-finance-dashboard",
            "styleUrls": [
                "./finance-dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./finance-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-finance-dashboard',\n  templateUrl: './finance-dashboard.component.html',\n  styleUrls: ['./finance-dashboard.component.css']\n})\nexport class FinanceDashboardComponent  {\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./finance-dashboard.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<svd-operation-category></svd-operation-category>\n"
        },
        {
            "name": "GameOfLifeComponent",
            "id": "component-GameOfLifeComponent-4742a96a4d78dc5ea6e039ad96cf6c71cd2a068f96d9f28caf4ee1b123e1c9cccd1ae27228e2aecc18b5895a9afad5702f197430c2a4eda2668c0224f655210b",
            "file": "src/app/features/game-of-life/game-of-life.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-game-of-life",
            "styleUrls": [
                "./game-of-life.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./game-of-life.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alivePercentage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameOfLifeService",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "gameSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameSettings",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "GameState",
                    "defaultValue": "GameState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "getInitialSettings",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSpeedOptions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getValuesArray",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "heightOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "initialLifeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "speedOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameSpeed[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "state",
                    "defaultValue": "GameState.NotStarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameState",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "widthOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getForm",
                    "args": [
                        {
                            "name": "settings",
                            "type": "GameSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "GameSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "GameSettings",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\nimport { GameSettings } from '@models/game-of-life/gameSettings';\nimport { GameOfLifeService } from '@services/game-of-life/game-of-life.service';\nimport { GameSpeed } from '@enums/gameSpeed';\nimport { GameState } from '@models/game-of-life/gameState';\n\n@UntilDestroy()\n@Component({\n  selector: 'svd-game-of-life',\n  templateUrl: './game-of-life.component.html',\n  styleUrls: ['./game-of-life.component.css']\n})\nexport class GameOfLifeComponent implements OnInit {\n  GameState = GameState;\n\n  game: GameOfLifeService;\n\n  widthOptions: number[];\n  heightOptions: number[];\n  initialLifeOptions: number[];\n  speedOptions: GameSpeed[];\n  gameSettings: GameSettings;\n\n  form: FormGroup;\n  state: GameState = GameState.NotStarted;\n  alivePercentage: number = 0;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.widthOptions = this.getValuesArray(7, 10);\n    this.heightOptions = this.getValuesArray(5, 10);\n    this.initialLifeOptions = this.getValuesArray(10, 10);\n    this.speedOptions = this.getSpeedOptions();\n    this.gameSettings = this.getInitialSettings();\n    this.form = this.getForm(this.gameSettings);\n    this.game = new GameOfLifeService(this.gameSettings);\n  }\n\n  ngOnInit(): void {\n    this.game.state.pipe(untilDestroyed(this))\n      .subscribe(value => this.state = value);\n    this.game.alivePercentage.pipe(untilDestroyed(this))\n      .subscribe(value => this.alivePercentage = value);\n  }\n\n  restart(): void {\n    const settings = this.getFormSettings();\n    this.game.restart(settings);\n  }\n\n  private getValuesArray = (size: number, step: number) =>\n    Array(size).fill(0).map((x, i) => (i + 1) * step)\n\n  private getSpeedOptions = () => [\n    GameSpeed.Slow,\n    GameSpeed.Normal,\n    GameSpeed.Fast\n  ]\n\n  private getInitialSettings = (): GameSettings => ({\n    gridWidth: 70,\n    gridHeight: 30,\n    speed: GameSpeed.Normal,\n    initialLifePercentage: 50\n  })\n\n  private getForm(settings: GameSettings) {\n    return this.formBuilder.group({\n      gridWidth: [\n        settings.gridWidth,\n        [Validators.required]],\n      gridHeight: [\n        settings.gridHeight,\n        [Validators.required]],\n      initialLifePercentage: [\n        settings.initialLifePercentage,\n        [Validators.required]],\n      speed: [\n        settings.speed,\n        [Validators.required]]\n    });\n\n  }\n\n  private getFormSettings(): GameSettings {\n    return this.form.value;\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "td {\n  width: .75rem;\n  height: .75rem;\n}\n\ntd div {\n  width: 100%;\n  height: 100%\n}\n\ntd.alive div {\n  background: var(--svd-game-alive);\n}\n\ntd.grave div {\n  background: var(--svd-game-dead);\n}\n\n.alive-percentage {\n  display: block;\n  width: 100%;\n  height: 2rem;\n  background: #f1f1f1;\n  border-radius: .5rem;\n  overflow: hidden;\n  position: relative;\n  margin: 0 0 1.25rem\n}\n\n.alive-percentage__indicator {\n  position: absolute;\n  box-sizing: border-box;\n  top: 0;\n  left: 0;\n  width: 10%;\n  height: 100%;\n  background: var(--svd-highlightColor);\n  color: var(--svd-alternateTextColor);\n  transition: width .25s;\n  text-align: right;\n  font-size: .8125rem;\n  line-height: 2rem;\n  text-shadow: .0625rem .0625rem .0625rem rgba(0, 0, 0, .7)\n}\n\n.alive-percentage__indicator span {\n  display: block;\n  padding: 0 .625rem\n}\n",
                    "styleUrl": "./game-of-life.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"text-center\">Conways Game of life</h1>\n<form [formGroup]=\"form\"\n      class=\"mb-2\">\n  <div class=\"form row flex-row d-flex align-items-end\">\n    <div class=\"col-md-3 col-lg-2 mt-2\">\n\n      <label for=\"gridWidthSelect\"\n             class=\"form-label\">Grid width</label>\n      <select id=\"gridWidthSelect\"\n              formControlName=\"gridWidth\"\n              class=\"form-select\"\n              aria-label=\"Select grid width\">\n        <option *ngFor=\"let option of widthOptions\"\n                [value]=\"option\">\n          {{option}}\n        </option>\n      </select>\n\n    </div>\n    <div class=\"col-md-3 col-lg-2 mt-2\">\n\n      <label for=\"gridHeightSelect\"\n             class=\"form-label\">Grid height</label>\n      <select id=\"gridHeightSelectSelect\"\n              formControlName=\"gridHeight\"\n              class=\"form-select\"\n              aria-label=\"Select grid height\">\n        <option *ngFor=\"let option of heightOptions\"\n                [value]=\"option\">\n          {{option}}\n        </option>\n      </select>\n\n    </div>\n    <div class=\"col-md-3 col-lg-2 mt-2\">\n\n      <label for=\"speedSelect\"\n             class=\"form-label\">Speed</label>\n      <select id=\"speedSelect\"\n              formControlName=\"speed\"\n              class=\"form-select\"\n              aria-label=\"Select game speed\">\n        <option *ngFor=\"let speed of speedOptions\"\n                [value]=\"speed\">\n          {{speed}}\n        </option>\n      </select>\n\n    </div>\n    <div class=\"col-md-3 col-lg-2 mt-2\">\n\n      <label for=\"initialLifeSelect\"\n             class=\"form-label\">Initial life</label>\n      <select id=\"initialLifeSelect\"\n              formControlName=\"initialLifePercentage\"\n              class=\"form-select\"\n              aria-label=\"Select initial life probability\">\n        <option *ngFor=\"let option of initialLifeOptions\"\n                [value]=\"option\">\n          {{option}}%\n        </option>\n      </select>\n\n    </div>\n    <div class=\"col-md-3 col-lg-2 d-flex align-items-end mt-2\">\n      <button *ngIf=\"state === GameState.Ongoing\"\n              svd-button\n              type='button'\n              aria-label=\"Pause playback\"\n              class=\"btn sharp uppercase w-100 mt-1\"\n              (click)=\"game.pause()\">\n        Pause\n      </button>\n      <button *ngIf=\"state === GameState.Paused\"\n              svd-button\n              type='button'\n              aria-label=\"Unpause playback\"\n              class=\"btn sharp uppercase w-100 mt-1\"\n              (click)=\"game.unpause()\">\n        Unpause\n      </button>\n    </div>\n    <div class=\"col-md-3 col-lg-2 align-items-end mt-2\">\n\n      <ng-container *ngIf=\"state === GameState.NotStarted;\n                    else restartButton\">\n        <button svd-button\n                type='button'\n                aria-label=\"Start game\"\n                class=\"btn sharp uppercase w-100\"\n                (click)=\"game.start()\">\n          Start\n        </button>\n      </ng-container>\n\n    </div>\n  </div>\n</form>\n\n\n<div class=\"mt-3 fs-4\">Currently alive:</div>\n\n<ng-container *ngIf=\"alivePercentage <= 0; else aliveProgressBar\">\n  <p class=\"text-center\">All cells are dead</p>\n</ng-container>\n\n<div class=\"d-flex justify-content-center mt-4\">\n  <table>\n    <tr *ngFor=\"let row of game.cells | async\">\n      <td *ngFor=\"let cell of row\"\n          [ngClass]=\"cell.style\">\n        <div></div>\n      </td>\n    </tr>\n  </table>\n</div>\n\n<ng-template #restartButton>\n  <button svd-button\n          type='button'\n          aria-label=\"Apply current settings\"\n          class=\"btn sharp uppercase w-100\"\n          (click)=\"restart()\">\n    Restart\n  </button>\n</ng-template>\n\n<ng-template #aliveProgressBar>\n  <div class=\"alive-percentage\">\n    <div class=\"alive-percentage__indicator\"\n         style.width=\"{{alivePercentage}}%\">\n      <span>{{alivePercentage}}%</span>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-15a46a419ab5c66acc9de8b90155cdf246718fbc66d45dfc126d4be1b07fb524042f9d114ffca0eb64ae994c3a5ab6c9a09c466929b7e71a0e5be4702cbb5b1b",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "menuToggled",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "Icon",
                    "defaultValue": "Icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { Icon } from '@enums/icons';\n\n@Component({\n  selector: 'svd-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n  Icon = Icon;\n\n  @Output() menuToggled = new EventEmitter<void>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: none;\n}\n\n@media screen and (max-width: 960px) {\n  :host {\n    display: flex;\n  }\n}\n\n.svd-navbar.navbar {\n  background-color: var(--svd-panelsColor);\n  color: var(--svd-textColor);\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<nav class=\"svd-navbar navbar sticky-top w-100\">\n  <div class=\"container-fluid\">\n    <i class=\"{{ Icon.Menu }}\"\n       role=\"button\"\n       (click)=\"menuToggled.emit()\"></i>\n  </div>\n</nav>\n"
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-99f6da617fc82ace6dc8c1801fd6e77dbe8d71c762271c8e3cf4a348c90677dad0bb41cec5d24b0866967cc48743f16bf4459a2741eb6a1f23dc4eafed44bafa",
            "file": "src/app/shared/image/image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-image",
            "styleUrls": [
                "./image.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "image",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Image | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Image } from 'src/app/core/backend-models/image';\n\n@Component({\n  selector: 'svd-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.css']\n})\nexport class ImageComponent {\n  @Input() image: Image | null = null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  padding-bottom: 50%;\n  position: relative;\n  border-radius: .375rem;\n  transform: translate(0)\n}\n\n:host:hover .image__face {\n  transform: scale(1.05);\n}\n\n:host:hover .image__fade__img {\n  transform: scale(1.2)\n}\n\n.image__face,\n.image__fade {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 2;\n  transition: transform .2s;\n  background: center center no-repeat\n}\n\n.image__face {\n  background-size: contain\n}\n\n.image__fade {\n  z-index: 1;\n  overflow: hidden\n}\n\n.image__fade__img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: -.625rem;\n  background: center center no-repeat;\n  background-size: contain;\n  background-size: cover;\n  filter: blur(.625rem);\n  transition: transform .3s\n}\n\n.image__title {\n  color: var(--svd-alternateTextColor);\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  padding: .625rem 1.5rem;\n  font-size: 1rem;\n  z-index: 6;\n  background: rgba(0, 0, 0, .5)\n}\n\nimg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  z-index: 5\n}\n",
                    "styleUrl": "./image.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"image == null else imageTemplate\">\n  No image source.\n</ng-container>\n\n<ng-template #imageTemplate>\n  <img tabindex=\"0\"\n       [src]=\"image!.medium\"\n       [alt]=\"image!.alt\"\n       [title]=\"image!.title\">\n  <div class=\"image__title\">{{image!.title}}</div>\n  <div class=\"image__fade\">\n\n    <div class=\"image__fade__img\"\n         [style.background-image]=\"image!.medium | urlAsBackgroundImage\">\n    </div>\n\n  </div>\n  <div class=\"image__face\"\n       [style.background-image]=\"image!.medium | urlAsBackgroundImage\">\n  </div>\n</ng-template>\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-48f2cae76d8c93b866f70be69c5066d3e365c68d16080470a608d3cf0b81c97378f3559ac642fb4294b85219657980b38c0e3d32386deb01917915b1e1e3bb69",
            "file": "src/app/layout/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-layout",
            "styleUrls": [
                "./layout.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LayoutService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuToggled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "opened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { LayoutService } from '@services/layout.service';\n\n@Component({\n  selector: 'svd-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.css']\n})\nexport class LayoutComponent {\n  opened: boolean = true;\n\n  constructor(public layout: LayoutService) {\n  }\n\n  menuToggled = () => this.layout.menuToggled();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  margin-left: var(--svd-menuWidth);\n}\n\n@media screen and (max-width: 960px) {\n  .content {\n    margin-left: 0;\n  }\n}\n",
                    "styleUrl": "./layout.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layout",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "layout",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"d-flex flex-column h-100\">\n\n  <svd-header (menuToggled)=\"menuToggled()\"></svd-header>\n  <svd-menu [visibilityStream]=\"layout.menuVisible\"></svd-menu>\n  <div class=\"content flex-grow-1 p-5\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
        },
        {
            "name": "LeftToolbarComponent",
            "id": "component-LeftToolbarComponent-d4bfce4a3df679f68a2eca766a7334451d27ab2c441e7cfc71c8267442114ee7bb4015e7791c05d7be1b4d2119ec8a0472e8c986f5a95003b9d47bc5fc4df79a",
            "file": "src/app/features/drawings/left-toolbar/left-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-left-toolbar",
            "styleUrls": [
                "./left-toolbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./left-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-left-toolbar',\n  templateUrl: './left-toolbar.component.html',\n  styleUrls: ['./left-toolbar.component.css']\n})\nexport class LeftToolbarComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./left-toolbar.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"h-100 p-3\">\n  <div class=\"d-flex h-100 align-items-start flex-column\">\n    <div class=\"btn-group-vertical mb-auto\">\n      Left tool bar\n  </div>\n</div>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-714e72ed23fd7d7e718689a3511bf73b87bae95d323a04e3ee19521857f0a8eab6b272feee252fe18400477b4c868d18e35ef61635716977629e83c0d52d4a71",
            "file": "src/app/layout/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "visibilityStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Observable<boolean> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AppRouts",
                    "defaultValue": "AppRouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "Icon",
                    "defaultValue": "Icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LayoutService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mediaMenuVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.menu-visible'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.menu-visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { AppRouts } from '@enums/appRouts';\nimport { LayoutService } from '@services/layout.service';\nimport { Icon } from '@enums/icons';\n\n@UntilDestroy()\n@Component({\n  selector: 'svd-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n  Icon = Icon;\n  AppRouts = AppRouts;\n\n  @Input() visibilityStream: Observable<boolean> | null = null;\n\n  @HostBinding('class.menu-visible') mediaMenuVisible: boolean = false;\n\n  constructor(public layout: LayoutService) { }\n\n  ngOnInit(): void {\n    this.visibilityStream?.pipe(untilDestroyed(this))\n      .subscribe(value =>\n        this.mediaMenuVisible = value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: fixed;\n  background: #fff;\n  top: 0;\n  left: 0;\n  background: var(--svd-panelsColor);\n  width: var(--svd-menuWidth);\n  padding: 1.5625rem;\n  height: 100vh;\n  z-index: 900;\n  overflow: auto;\n}\n\n@media screen and (max-width: 960px) {\n  :host {\n    padding-top: 3.125rem;\n    transform: translate(calc(var(--svd-menuWidth) * -1));\n    transition: transform .25s;\n  }\n\n  :host.menu-visible {\n    transform: translate(0);\n  }\n}\n\n.logo {\n  width: var(--svd-logoWidth);\n}\n\n\n.menu-item  {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.menu-item a {\n  display: block;\n  padding: 0.7rem 1rem;\n  text-align: right;\n  margin: 0 -1.25rem;\n  text-decoration: none;\n  color: var(--svd-textColor);\n  font-size: 1.1875rem;\n  text-transform: uppercase;\n  transition: transform .25s;\n  transform-origin: right center;\n}\n\n.menu-item a:hover,\n.menu-item a.active {\n  color: var(--svd-linkHoverColor);\n  transform: scale(1.05);\n}\n\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layout",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "layout",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col\">\n  <div class=\"d-flex justify-content-center\">\n\n    <img [routerLink]=\"['/']\"\n         aria-label=\"svd logo\"\n         class=\"logo center-block\"\n         role=\"button\"\n         src=\"/assets/images/logo.png\">\n\n  </div>\n  <div class=\"menu-item d-flex justify-content-center mt-4\">\n\n    <a routerlinkactive=\"active\"\n       routerLink=\"/{{AppRouts.Article}}\"\n       (click)=\"layout.closeMenu()\">\n      Article\n      <i class=\"{{ Icon.Article}} md\"></i>\n    </a>\n\n  </div>\n  <div class=\"menu-item d-flex justify-content-center\">\n\n    <a routerlinkactive=\"active\"\n       routerLink=\"/{{AppRouts.ArticleList}}\"\n       (click)=\"layout.closeMenu()\">\n      Table\n      <i class=\"{{ Icon.ArticleTable }} md\"></i>\n    </a>\n\n  </div>\n  <div class=\"menu-item d-flex justify-content-center\">\n\n    <a routerlinkactive=\"active\"\n       routerLink=\"/{{AppRouts.GameOfLife}}\"\n       (click)=\"layout.closeMenu()\">\n      Game of Life\n      <i class=\"{{ Icon.GameOfLife}} md\"></i>\n    </a>\n\n  </div>\n\n  <div class=\"menu-item d-flex justify-content-center\">\n\n    <a routerlinkactive=\"active\"\n       routerLink=\"/{{AppRouts.Drawings}}\"\n       (click)=\"layout.closeMenu()\">\n      Canvas\n      <i class=\"{{ Icon.Drawings}} md\"></i>\n    </a>\n\n  </div>\n\n  <div class=\"menu-item d-flex justify-content-center\">\n\n    <a routerlinkactive=\"active\"\n       routerLink=\"/{{AppRouts.Finance}}\"\n       (click)=\"layout.closeMenu()\">\n      Finance\n    <i class=\"{{ Icon.Finance}} md\"></i>\n    </a>\n\n  </div>\n</div>\n"
        },
        {
            "name": "OperationCategoryComponent",
            "id": "component-OperationCategoryComponent-fac0679976a2ee26684c06c7b04d6ea87a0b190ca21d3dabf537bc872bae4bda3d4911ec92ec865c7d2ad0f482780ef883660db18a8d30fce014f13b201c6eee",
            "file": "src/app/features/finance/operation-category/operation-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-operation-category",
            "styleUrls": [
                "./operation-category.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./operation-category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "operationCategory",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "AuditableOperationCategory | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "formState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "getDefaultForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "getDefaultFormState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "updateFormState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "ValidatedResponse<AuditableOperationCategory>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "ValidatedResponse<AuditableOperationCategory>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "OperationCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\n\nimport {\n  AuditableOperationCategory, OperationCategoryRequest\n} from '@backend-models/finance/operationCategory';\nimport { ValidatedResponse } from '@backend-models/validatedResponse';\nimport { generateRandomHex } from '@shared/utilities/color';\nimport {\n  parseValidationErrors,\n  updateFormState\n} from '@shared/utilities/control-validation';\nimport { ControlState } from '@models/controlState';\nimport {\n  OperationCategoryHandler\n} from '@services/abstract/operationCategoryHandler';\n\n@Component({\n  selector: 'svd-operation-category',\n  templateUrl: './operation-category.component.html',\n  styleUrls: ['./operation-category.component.css']\n})\nexport class OperationCategoryComponent implements OnInit {\n  @Input() operationCategory: AuditableOperationCategory | null = null;\n\n  color: string | null = null;\n  form: FormGroup;\n  formState: { [key: string]: ControlState; };\n  errors: string[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private handler: OperationCategoryHandler) {\n\n    this.form = this.getDefaultForm();\n    this.formState = this.getDefaultFormState();\n  }\n\n  ngOnInit(): void {\n    if (this.operationCategory == null) {\n      this.color = generateRandomHex();\n      return;\n    }\n\n    this.form.controls.name.setValue(this.operationCategory.name);\n    this.color = this.operationCategory.color;\n  }\n\n  submit() {\n    this.errors = [];\n    this.formState = this.getDefaultFormState();\n\n    if (!this.color) {\n      throw new Error('Operation category color is not set.');\n    }\n\n    if (this.form.invalid) {\n      this.updateFormState();\n      return;\n    }\n\n    const name = this.form.controls.name.value;\n    const request =\n      new OperationCategoryRequest(name, this.color);\n\n    if (this.operationCategory) {\n      this.update(request);\n      return;\n    }\n\n    this.add(request);\n  }\n\n  update(request: OperationCategoryRequest) {\n    if (this.operationCategory == null) {\n      throw new Error('Operation category is not defined.');\n    }\n    const updatedOperationCategory =\n      this.operationCategory.getUpdated(request);\n\n    const responseObserver =\n      this.handler.update(updatedOperationCategory);\n    responseObserver.subscribe(response => this.parseResponse(response));\n  }\n\n  add(request: OperationCategoryRequest) {\n    const responseObserver = this.handler.add(request);\n    responseObserver.subscribe(response => this.parseResponse(response));\n  }\n\n  parseResponse(response: ValidatedResponse<AuditableOperationCategory>) {\n    if (response.validationResult.isValid) {\n      return;\n    }\n\n    parseValidationErrors(\n      response.validationResult.errors,\n      this.form,\n      this.formState);\n  }\n\n  updateFormState = () =>\n    updateFormState(this.form, this.formState);\n\n  getDefaultForm = (): FormGroup => this.formBuilder.group({\n    name: [\n      null,\n      [\n        Validators.required,\n        Validators.maxLength(60)\n\n      ]]\n  });\n\n  getDefaultFormState = (): { [key: string]: ControlState; } => ({\n    name: new ControlState()\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./operation-category.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "handler",
                        "type": "OperationCategoryHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "handler",
                        "type": "OperationCategoryHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col\">\n  <div class=\"row mb-3\">\n\n    <label for=\"categoryName\"\n           class=\"form-label\">Category name:</label>\n    <div class=\"d-flex\">\n      <form [formGroup]=\"form\"\n            class=\"flex-fill me-2\">\n\n        <input class=\"form-control\"\n               id=\"categoryName\"\n               aria-describedby=\"categoryName\"\n               placeholder=\"Enter category name...\"\n               formControlName=\"name\"\n               [class.is-invalid]=\"formState.name.isInvalid\"\n               [attr.title]=\"formState.name.error\">\n      </form>\n      <ngx-colors ngx-colors-trigger\n                  [(ngModel)]=\"color\"></ngx-colors>\n\n    </div>\n\n  </div>\n\n  <div class=\"row d-grid d-md-flex justify-content-md-end mx-auto\">\n    <div class=\"col-md-3 col-lg-2\">\n      <button svd-button\n              type=\"submit\"\n              class=\"btn sharp uppercase w-100\"\n              (click)=\"submit()\">Save\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "OperationComponent",
            "id": "component-OperationComponent-7f059858ce0033c56da7f3c05ccd36bfa9c7c8aeebfabf6d7355bcc345332823a76d81401858df82764895f09a72055f2e9a0468bf5d2949e7a656b8b1d7cac5",
            "file": "src/app/features/finance/operation/operation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-operation",
            "styleUrls": [
                "./operation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./operation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-operation',\n  templateUrl: './operation.component.html',\n  styleUrls: ['./operation.component.css']\n})\nexport class OperationComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./operation.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>operation works!</p>\n"
        },
        {
            "name": "PagingComponent",
            "id": "component-PagingComponent-7a49530c6e8839a2f88f8e9a6f5f2f2a8e5a9e71bd81cd2d72e1f02f72862d626e6a84091a3cd2681374e5d0ea540b0cbb667f14c171654a44ef50a87f08cc90",
            "file": "src/app/shared/paging/paging.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-paging",
            "styleUrls": [
                "./paging.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paging.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "view",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "PagingView | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "shiftPage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { PagingView } from '@models/article/pagingData';\n\n@Component({\n  selector: 'svd-paging',\n  templateUrl: './paging.component.html',\n  styleUrls: ['./paging.component.css']\n})\nexport class PagingComponent {\n  @Input() view: PagingView | null = null;\n  @Output() shiftPage = new EventEmitter<number>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.disabled {\n  opacity: .4;\n  pointer-events: none;\n  border: none\n}\n\n@media screen and (max-width: 960px) {\n  .buttonWrapper [svd-button] {\n    width: 1.5rem;\n    height: 1.5rem\n  }\n}\n",
                    "styleUrl": "./paging.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"view == null else paging\">\n  No data provide for paging.\n</ng-container>\n\n<ng-template #paging>\n  <div class=\"buttonWrapper mt-3 text-center\">\n\n    <button aria-label=\"Navigate to previous page\"\n            svd-button\n            class=\"svd-button__transparent\"\n            variant=\"transparent\"\n            [ngClass]=\"{'disabled': view!.leftShiftDisabled}\"\n            (click)=\"shiftPage.emit(-1)\">\n      <ngx-fa name=\"chevron-left\"\n              size=\"md\">\n      </ngx-fa>\n    </button>\n\n    <button *ngFor=\"let pageNumber of view!.pagingRange\"\n            svd-button\n            variant=\"transparent\"\n            [class.svd-button__active]=\"pageNumber === view!.pageIndex\"\n            aria-label=\"Navigate to page 1\"\n            class=\"svd-button__transparent\"\n            (click)=\"shiftPage.emit(pageNumber - view!.pageIndex)\">\n      {{pageNumber}}\n    </button>\n\n    <button aria-label=\"Navigate to next page\"\n            svd-button\n            variant=\"transparent\"\n            class=\"svd-button__transparent\"\n            [ngClass]=\"{'disabled': view!.rightShiftDisabled}\"\n            (click)=\"shiftPage.emit(1)\">\n      <ngx-fa name=\"chevron-right\"\n              size=\"md\">\n      </ngx-fa>\n    </button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "RemoteStateWrapperComponent",
            "id": "component-RemoteStateWrapperComponent-b5ad6e05fe60631056d2c8e1a769b004e8e2f1de162d61ef99ceb7957f32693397cec60b230ad6b3bcb5966847a69a245588798cc3a977a66110a4031292b575",
            "file": "src/app/shared/remote-state-wrapper/remote-state-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-remote-state-wrapper",
            "styleUrls": [
                "./remote-state-wrapper.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./remote-state-wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "defaultValue": "RemoteRouterState.Unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "RemoteRouterState",
                    "defaultValue": "RemoteRouterState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { RemoteRouterState } from '@enums/remoteRouterState';\n\n@Component({\n  selector: 'svd-remote-state-wrapper',\n  templateUrl: './remote-state-wrapper.component.html',\n  styleUrls: ['./remote-state-wrapper.component.css']\n})\nexport class RemoteStateWrapperComponent {\n  RemoteRouterState = RemoteRouterState;\n\n  @Input() state = RemoteRouterState.Unknown;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./remote-state-wrapper.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<container-element [ngSwitch]=\"state\">\n  <ng-container *ngSwitchCase=\"RemoteRouterState.Start\">\n    <div class=\"d-flex align-items-center justify-content-center h-100\">\n      <img src=\"assets/images/loader.svg\">\n    </div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"RemoteRouterState.Error\">\n    <div class=\"d-flex align-items-center justify-content-center h-100\">\n      <p>Something went wrong\n      <i class=\"fa-solid fa-fw fa-heart-crack\"></i></p>\n    </div>\n  </ng-container>\n  <ng-container *ngSwitchDefault>\n    <ng-content></ng-content>\n  </ng-container>\n</container-element>\n"
        },
        {
            "name": "RightToolbarComponent",
            "id": "component-RightToolbarComponent-e8e438581da8edfb9bceeb741ba494926519222692b1ec0a7e2d952539ef183adf0ef588425497db0eff237fcb35d790b78ef41443aead3766ce6df2f31751fc",
            "file": "src/app/features/drawings/right-toolbar/right-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-right-toolbar",
            "styleUrls": [
                "./right-toolbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./right-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-right-toolbar',\n  templateUrl: './right-toolbar.component.html',\n  styleUrls: ['./right-toolbar.component.css']\n})\nexport class RightToolbarComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./right-toolbar.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"flex-fill h-100 p-3\">\n  Right toolbar\n</div>\n"
        },
        {
            "name": "SceneComponent",
            "id": "component-SceneComponent-ecb1ed2ce6084c98a275ba06958d33a8935fc45f9f0022c0a72eea47d227ea7e5e7fa7cadaf6f3062f40728205c91d6525e74e94c62853cf5bb2d123beacb65a",
            "file": "src/app/features/drawings/scene/scene.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-scene",
            "styleUrls": [
                "./scene.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./scene.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvasContainer",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLCanvasElement> | null",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvasContainer', {static: true}"
                        }
                    ]
                },
                {
                    "name": "interactionMode",
                    "defaultValue": "SceneInteractionMode.AllActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "multiselectMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "painter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DrawingHandler",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild\n} from '@angular/core';\n\nimport { fromEvent, mergeMap, takeUntil } from 'rxjs';\n\nimport { SceneEvent, SceneInteractionMode } from '@enums/scene';\nimport { DrawingHandler } from '@services/abstract/drawingHandler';\nimport { Point } from '@models/drawings/elements';\nimport { DrawingService } from '@services/drawing/drawing.service';\n\n@Component({\n  selector: 'svd-scene',\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.css']\n})\nexport class SceneComponent implements OnInit {\n\n  @ViewChild('canvasContainer', { static: true }) canvasContainer:\n    ElementRef<HTMLCanvasElement> | null = null;\n\n  get canvas(): HTMLCanvasElement {\n    if (this.canvasContainer == null) {\n      throw new Error('Canvas container is undefined.')\n    }\n\n    return this.canvasContainer.nativeElement;\n  }\n\n  private multiselectMode = false;\n  private interactionMode = SceneInteractionMode.AllActions;\n\n  private painter: DrawingHandler;\n\n\n  constructor() {\n    this.painter = new DrawingService();\n  }\n\n  ngOnInit(): void {\n    const move$ = fromEvent<MouseEvent>(this.canvas, SceneEvent.PointerMove);\n    const down$ = fromEvent<MouseEvent>(this.canvas, SceneEvent.PointerDown);\n    const up$ = fromEvent<MouseEvent>(this.canvas, SceneEvent.PointerUp);\n    const paints$ = down$.pipe(\n      mergeMap(_ => move$.pipe(takeUntil(up$)))\n    );\n\n    paints$.subscribe((event) => {\n      const point: Point = {\n        x: event.offsetX,\n        y: event.offsetY\n      };\n      this.painter.paint(point)\n    });\n\n    this.painter.initializeCanvas(this.canvas);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./scene.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canvas": {
                    "name": "canvas",
                    "getSignature": {
                        "name": "canvas",
                        "type": "",
                        "returnType": "HTMLCanvasElement",
                        "line": 25
                    }
                }
            },
            "templateData": "<canvas #mount\n        #canvasContainer\n        class=\"d-flex flex-column ecap-scene\">\n</canvas>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-10ca2533861f5bc9531e14a1f7d78f38efab5301a2fa2107a980be40a9d64b15ba6a8ff86da597123da9ce0a8b4f3a57ec31b818f460a6093a4f4ebc78062046",
            "file": "src/app/shared/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnsStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Observable<[] | null> | null",
                    "decorators": []
                },
                {
                    "name": "detailTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TemplateRef<> | null",
                    "decorators": []
                },
                {
                    "name": "pagingStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Observable<PagingBase | null> | null",
                    "decorators": []
                },
                {
                    "name": "recordsStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Observable<T[]> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDataBase<T>[] | null",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "columnsCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "columnViews",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnView[] | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "getColumnViews",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "originalOrderRecords",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paging",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagingBase | null",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "pagingView",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagingView | null",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sortColumn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "sortedRecords",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sortingColumn",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDataBase<T> | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shiftPage",
                    "args": [
                        {
                            "name": "shift",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shift",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortBy",
                    "args": [
                        {
                            "name": "column",
                            "type": "ColumnDataBase<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "ColumnDataBase<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef\n} from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Guid } from 'guid-typescript';\n\nimport { PagingBase, PagingView } from '@models/article/pagingData';\nimport {\n  ColumnDataBase, ColumnView\n} from '@models/article/tableData';\nimport { SortingOrder } from '@enums/sortingType';\n\n@UntilDestroy()\n@Component({\n  selector: 'svd-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent<T> implements OnInit {\n  @Input() columnsStream: Observable<ColumnDataBase<T>[] | null> | null = null;\n  @Input() recordsStream: Observable<T[]> | null = null;\n  @Input() pagingStream: Observable<PagingBase | null> | null = null;\n  @Input() detailTemplate: TemplateRef<unknown> | null = null;\n\n  sortingColumn: ColumnDataBase<T> | null = null;\n  sortedRecords: T[] = [];\n\n  columns: ColumnDataBase<T>[] | null = null;\n  columnViews: ColumnView[] | null = null;\n  columnsCount = 0;\n\n  paging: PagingBase | null = null;\n  pagingView: PagingView | null = null;\n\n  selectedRow: number | null = null;\n  private originalOrderRecords: T[] = [];\n\n  ngOnInit(): void {\n    this.recordsStream?.pipe(untilDestroyed(this))\n      .subscribe(records => {\n        this.sortedRecords = [...records];\n        this.originalOrderRecords = [...records];\n      });\n    this.pagingStream?.pipe(untilDestroyed(this))\n      .subscribe(pagingData => {\n        this.paging = pagingData;\n\n        if (pagingData == null) {\n          return;\n        }\n        this.pagingView = pagingData.pagingView;\n      });\n    this.columnsStream?.pipe(untilDestroyed(this))\n      .subscribe(columns => {\n        this.columns = columns;\n\n        if (columns == null) {\n          return;\n        }\n        this.columnsCount = columns.length;\n        this.columnViews = this.getColumnViews(columns);\n      });\n  }\n\n  selectRow(index: number) {\n    if(index === this.selectedRow){\n      this.selectedRow = null;\n      return\n    }\n    this.selectedRow = index;\n  }\n\n  sortColumn = (columnId: Guid) => {\n    this.selectedRow = null;\n\n    let sortingColumn: ColumnDataBase<T> | null = null;\n    this.columns!.forEach(column => {\n      if (column.id === columnId) {\n        column.switchSortingOrder();\n        sortingColumn = column;\n      } else {\n        column.setSortingToDefault();\n      }\n    });\n\n    if (sortingColumn == null) {\n      throw new Error(`Column with id ${columnId} does not exist`);\n    }\n\n    this.columnViews = this.getColumnViews(this.columns!);\n    this.sortBy(sortingColumn!);\n\n  }\n\n  shiftPage(shift: number) {\n    this.selectedRow = null;\n\n    this.paging!.shiftPage(shift);\n    this.pagingView = this.paging!.pagingView;\n  }\n\n  private sortBy(column: ColumnDataBase<T>): void {\n    if (column!.compareFunction == null) {\n      return;\n    }\n\n    if (column.sortingOrder === SortingOrder.Default) {\n      this.sortedRecords = [...this.originalOrderRecords];\n      return;\n    }\n\n    if (column.sortingOrder === SortingOrder.Ascendant) {\n      this.sortedRecords =\n        [...this.originalOrderRecords]\n          .sort((recordA, recordB) =>\n            column!.compareFunction!(recordA, recordB, true));\n      return;\n    }\n\n    if (column.sortingOrder === SortingOrder.Descendant) {\n      this.sortedRecords =\n        [...this.originalOrderRecords]\n          .sort((recordA, recordB) =>\n            column!.compareFunction!(recordA, recordB, false));\n      return;\n    }\n  }\n\n  private getColumnViews =\n    (columns: ColumnDataBase<T>[]): ColumnView[] =>\n      columns.map(column => ({\n        id: column.id,\n        icon: column.icon,\n        sortingOrder: column.sortingOrder,\n        title: column.title,\n        nonSortable: column.nonSortable,\n        widthPercentage: column.widthPercentage\n      } as ColumnView));\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-wrapper {\n  display: block;\n  overflow: auto;\n  width: 100%\n}\n\ntable {\n  border-collapse: collapse;\n  min-width: 100%;\n  font-size: 1rem;\n  table-layout: fixed\n}\n\ntable th {\n  background: var(--svd-highlightColor);\n  color: var(--svd-alternateTextColor);\n  text-align: left;\n  white-space: nowrap\n}\n\ntable th button {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: var(--svd-alternateTextColor);\n  cursor: pointer;\n  padding: 0;\n  font-size: 1rem;\n  font-weight: bold\n}\n\ntable th button.disabled {\n  cursor: default;\n}\n\n@media screen and (max-width: 960px) {\n  table th button {\n    font-size: .875rem\n  }\n}\n\ntable th,\ntable td {\n  padding: .625rem 1rem;\n  border-bottom: var(--svd-selectedRowBackground) .0625rem solid\n}\n\n@media screen and (max-width: 960px) {\n\n  table th,\n  table td {\n    font-size: .875rem;\n    padding: .375rem .5rem\n  }\n}\n\ntable tr:nth-child(even) td {\n  background: rgba(255, 255, 255, .1)\n}\n\ntable .clickable td {\n  cursor: pointer\n}\n\n@media screen and (max-width: 960px) {\n  table .clickable td {\n    white-space: nowrap\n  }\n}\n\ntable tr.active td {\n  background: var(--svd-selectedRowBackground);\n  color: var(--svd-textColor);\n}\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"columns == null\n                      || sortedRecords == null\n                      || paging == null\n                    else tableTemplate\">\n\n  <span *ngIf=\"columns == null\">\n    No column data provided.\n  </span>\n  <span *ngIf=\"sortedRecords == null\">\n    No records provided.\n  </span>\n  <span *ngIf=\"paging == null\">\n    No paging data provided.\n  </span>\n\n</ng-container>\n\n<ng-template #tableTemplate>\n  <div class=\"table-wrapper\">\n    <table>\n      <thead>\n        <tr>\n          <th *ngFor=\"let column of columnViews\">\n            <button [attr.aria-label]=\"column.title\"\n                    [ngClass]=\"{'disabled' : column.nonSortable}\"\n                    (click)=\"sortColumn(column.id)\">\n              {{column!.title}}\n              <ngx-fa *ngIf=\"column.icon\"\n                      [name]=\"column.icon\"\n                      size=\"lg\"></ngx-fa>\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-container *ngFor=\"let row of sortedRecords! |\n                                    getPage:columns!:pagingView!.elementsRange\">\n\n          <tr role=\"button\"\n              tabindex=\"0\"\n              class=\"clickable active\"\n              [ngClass]=\"{'active' : row.index === selectedRow}\"\n              (click)=\"selectRow(row!.index)\">\n            <td *ngFor=\"let cell of row!.cells\"\n                tabindex=\"0\">\n              {{cell}}\n            </td>\n          </tr>\n          <tr *ngIf=\"row.index === selectedRow && detailTemplate != null\"\n              role=\"button\"\n              tabindex=\"0\"\n              class=\"active\">\n            <td [attr.colspan]=\"columnsCount\">\n              <ng-container *ngTemplateOutlet=\"detailTemplate;\n                                                context: {record: row.record}\">\n              </ng-container>\n            </td>\n          </tr>\n\n        </ng-container>\n      </tbody>\n    </table>\n  </div>\n\n  <svd-paging [view]=\"pagingView\"\n              (shiftPage)=\"shiftPage($event)\">\n  </svd-paging>\n</ng-template>\n\n<ng-template #column\n             let-row=\"row\">\n  <tr role=\"button\"\n      tabindex=\"0\"\n      class=\"clickable\">\n    <td *ngFor=\"let cell of row?.cells\"\n        tabindex=\"0\">\n      {{cell}}\n    </td>\n  </tr>\n</ng-template>\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-77330eccb442238290b0818e90048393e60d3f086a494211b701a14a21e64e8610044c525913c951e01ac43f464d068dca798698fa27de96ec52abe870eb00c4",
            "file": "src/app/features/test/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svd-test",
            "styleUrls": [
                "./test.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svd-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.css"
                }
            ],
            "stylesData": "",
            "templateData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8660842285f7a8d79ed7cacc6d37e4bc93b21a1dd532ac55adee14b416c7ad8f2ed3d9eeab01cb600e8745ebe3a88c382453a7804e3f2454cfb197ec84da2503",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport {\n  BrowserAnimationsModule\n} from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AppProviders } from './app.providers';\nimport { ArticleModule } from './features/article/article.module';\nimport { LayoutModule } from './layout/layout.module';\nimport { SharedModule } from './shared/shared.module';\nimport {\n  GameOfLiveModule\n} from './features/game-of-life/game-of-life.module';\nimport { DrawingModule } from '@drawings/drawings.module';\nimport {\n  FinanceModule\n} from './features/finance/finance.module';\nimport { TestModule } from '@test/test/test.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n\n    ArticleModule,\n    LayoutModule,\n    SharedModule,\n    GameOfLiveModule,\n    DrawingModule,\n    FinanceModule,\n    TestModule\n  ],\n  providers: AppProviders,\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LayoutService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ArticleModule"
                        },
                        {
                            "name": "DrawingModule"
                        },
                        {
                            "name": "FinanceModule"
                        },
                        {
                            "name": "GameOfLiveModule"
                        },
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TestModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-74d5f10d9942eb07c748fcd61b57fe6c41e9b574263640977b98a8c569a4708675404f538f47a3f2fef8c51f363195f31185cbe892c453a7228117094deee4bd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ArticleComponent } from './features/article/article.component';\nimport {\n  ArticleListComponent\n} from './features/article/list/article-list.component';\nimport {\n  DefaultContentComponent\n} from './layout/default-content/default-content.component';\nimport {\n  ArticleResolver\n} from '@services/resolvers/article-resolver.service';\nimport {\n  ArticleListResolver\n} from '@services/resolvers/article-list-resolver.service';\nimport { AppRouts } from '@enums/appRouts';\nimport {\n  GameOfLifeComponent\n} from './features/game-of-life/game-of-life.component';\nimport {\n  DrawingsComponent\n} from './features/drawings/drawings.component';\nimport {\n  FinanceDashboardComponent\n} from './features/finance/finance-dashboard/finance-dashboard.component';\n\nconst routes: Routes = [{\n  path: `${AppRouts.Article}/:id`,\n  component: ArticleComponent,\n  resolve: {\n    article: ArticleResolver\n  },\n  data: {\n    title: 'Article'\n  }\n},\n{\n  path: `${AppRouts.Article}`,\n  component: ArticleComponent,\n  resolve: {\n    article: ArticleResolver\n  },\n  data: {\n    title: 'Article'\n  }\n},\n{\n  path: `${AppRouts.ArticleList}`,\n  component: ArticleListComponent,\n  resolve: {\n    articleLst: ArticleListResolver\n  },\n  data: {\n    title: 'List'\n  }\n},\n{\n  path: `${AppRouts.GameOfLife}`,\n  component: GameOfLifeComponent,\n  data: {\n    title: 'Game of life'\n  }\n},\n{\n  path: `${AppRouts.Drawings}`,\n  component: DrawingsComponent,\n  data: {\n    title: 'Drawings'\n  }\n},\n{\n  path: `${AppRouts.Finance}`,\n  component: FinanceDashboardComponent,\n  data: {\n    title: 'Finance'\n  }\n},\n{\n  path: '',\n  component: DefaultContentComponent,\n  pathMatch: 'full',\n  data: {\n    title: 'Svedera Sandbox'\n  }\n},\n{\n  path: '**',\n  component: DefaultContentComponent,\n  pathMatch: 'full',\n  data: {\n    title: 'Svedera Sandbox'\n  }\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ArticleModule",
            "id": "module-ArticleModule-c7aec22fa12e96344d102eaa26d2572b97ae4aecfe1d243c5cf56b74b9b03889ff02b5c1b56b7b7fb13cd6f04fb582989e871ee1525c172115704d2bcee496d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/article/article.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { ArticleComponent } from './article.component';\nimport { ArticleListComponent } from './list/article-list.component';\n\n@NgModule({\n  declarations: [\n    ArticleComponent,\n    ArticleListComponent\n  ],\n  exports: [\n    ArticleComponent,\n    ArticleListComponent\n  ],\n  imports: [\n    SharedModule\n  ]\n})\nexport class ArticleModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ArticleComponent"
                        },
                        {
                            "name": "ArticleListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ArticleComponent"
                        },
                        {
                            "name": "ArticleListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DrawingModule",
            "id": "module-DrawingModule-bcfa4d610defa997752c4d5139ea2790ccf7b93c80baf04a89857e63d28358fafc694d751b8e5cf082a1c24c14fa4e84ec683ab8d9533abf88aedb823d9affa8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/drawings/drawings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { DrawingsComponent } from './drawings.component';\nimport { LeftToolbarComponent } from './left-toolbar/left-toolbar.component';\nimport { RightToolbarComponent } from './right-toolbar/right-toolbar.component';\nimport { SceneComponent } from './scene/scene.component';\n\n@NgModule({\n  declarations: [\n    DrawingsComponent,\n    SceneComponent,\n    LeftToolbarComponent,\n    RightToolbarComponent\n  ],\n  imports: [\n    SharedModule\n  ],\n  exports: [\n    DrawingsComponent\n  ]\n})\nexport class DrawingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DrawingsComponent"
                        },
                        {
                            "name": "LeftToolbarComponent"
                        },
                        {
                            "name": "RightToolbarComponent"
                        },
                        {
                            "name": "SceneComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DrawingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FinanceModule",
            "id": "module-FinanceModule-89e87eb9809584427d363155275a1345d8b729b65f6291bc8dc85592a6db6416fd9b664694511a53a737284327d478a2e82c8f9bdb26b4815d85e0700b15396b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/finance/finance.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport {\n  FinanceDashboardComponent\n} from './finance-dashboard/finance-dashboard.component';\nimport {\n  OperationCategoryComponent\n} from './operation-category/operation-category.component';\nimport { AccountComponent } from './account/account.component';\nimport { OperationComponent } from './operation/operation.component';\n\n@NgModule({\n  declarations: [\n    FinanceDashboardComponent,\n    OperationCategoryComponent,\n    AccountComponent,\n    OperationComponent\n  ],\n  imports: [\n    SharedModule\n  ],\n  exports: [\n    FinanceDashboardComponent\n  ]\n})\nexport class FinanceModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "FinanceDashboardComponent"
                        },
                        {
                            "name": "OperationCategoryComponent"
                        },
                        {
                            "name": "OperationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FinanceDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GameOfLiveModule",
            "id": "module-GameOfLiveModule-266c6566bd6495fa6514ef9e7442e21b79ec03cc56f2bbc9e6a6317dff8d768fef250c6daf1a0c81ece4e83666836f30621f7b4e289bad94222586a9a3abf254",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/game-of-life/game-of-life.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { GameOfLifeComponent } from './game-of-life.component';\n\n@NgModule({\n  declarations: [\n    GameOfLifeComponent\n  ],\n  exports: [\n    GameOfLifeComponent\n  ],\n  imports: [\n    SharedModule\n  ]\n})\nexport class GameOfLiveModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GameOfLifeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GameOfLifeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-eb9535d7cbad85ac12aeeb123ef15944c14f5b694e07b8d5201e82a9ae972c6634e46bd67d07f3171d6154b58796d07fb0c4c1835b9477ba93bf93579a16fc2a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { HeaderComponent } from './header/header.component';\nimport { MenuComponent } from './menu/menu.component';\nimport {\n  DefaultContentComponent\n} from './default-content/default-content.component';\nimport { LayoutComponent } from './layout/layout.component';\n\n@NgModule({\n  declarations: [\n    MenuComponent,\n    HeaderComponent,\n    DefaultContentComponent,\n    LayoutComponent\n  ],\n  exports: [\n    LayoutComponent\n  ],\n  imports: [\n    SharedModule\n  ]\n})\nexport class LayoutModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultContentComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        },
                        {
                            "name": "MenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-61d9a2909c42fd4678a6fe235275d755c5971d872aac07acdee12760b37f755891ba6ea2ab2788c6c02f995a38ba2329cb8e86f14d61343da6f799ad6add1bd3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgxFontAwesomeModule } from 'ngx-font-awesome';\nimport { NgxColorsModule } from 'ngx-colors';\n\nimport { ImageComponent } from './image/image.component';\nimport { ChipComponent } from './chip/chip.component';\nimport { UrlAsBackgroundImagePipe } from './pipes/url-as-background-image.pipe';\nimport { RemoveEmptyEntriesPipe } from './pipes/remove-empty-entries.pipe';\nimport { TableComponent } from './table/table.component';\nimport { PagingComponent } from './paging/paging.component';\nimport { GetPagePipe } from './pipes/get-page.pipe';\nimport { FirstParagraphPipe } from './pipes/text-fragment.pipe';\nimport {\n  RemoteStateWrapperComponent\n} from './remote-state-wrapper/remote-state-wrapper.component';\n\n@NgModule({\n  declarations: [\n    UrlAsBackgroundImagePipe,\n    RemoveEmptyEntriesPipe,\n    FirstParagraphPipe,\n    GetPagePipe,\n\n    RemoteStateWrapperComponent,\n    ImageComponent,\n    ChipComponent,\n    TableComponent,\n    PagingComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    FormsModule,\n\n    NgxColorsModule,\n    NgxFontAwesomeModule\n  ],\n  exports: [\n    CommonModule,\n\n    NgxColorsModule,\n    NgxFontAwesomeModule,\n\n    ImageComponent,\n    ChipComponent,\n    TableComponent,\n\n    RemoteStateWrapperComponent,\n    UrlAsBackgroundImagePipe,\n    RemoveEmptyEntriesPipe,\n    FirstParagraphPipe,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule\n  ]\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        },
                        {
                            "name": "FirstParagraphPipe"
                        },
                        {
                            "name": "GetPagePipe"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "PagingComponent"
                        },
                        {
                            "name": "RemoteStateWrapperComponent"
                        },
                        {
                            "name": "RemoveEmptyEntriesPipe"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "UrlAsBackgroundImagePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        },
                        {
                            "name": "FirstParagraphPipe"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "RemoteStateWrapperComponent"
                        },
                        {
                            "name": "RemoveEmptyEntriesPipe"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "UrlAsBackgroundImagePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestModule",
            "id": "module-TestModule-b08742df75256b0dc9b5a51cf9f52dd97eed4cba4625aa1c5eafed5b486b48d300d97f5095bb99c13b354b5bf070cd910c3d6002d6f212f9064ee6717a8b1322",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/test/test/test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { TestComponent } from './test.component';\n\n@NgModule({\n  declarations: [\n    TestComponent\n  ],\n  imports: [\n    SharedModule\n  ],\n  exports: [\n    TestComponent\n  ]\n})\nexport class TestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation/opeartion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ApiConfigSuffix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApiConfiguration",
                "defaultValue": "{\n  articleUrl: '/api/list',\n  listUrl: '/api/list',\n  operationCategory: '/api/operation-category'\n}"
            },
            {
                "name": "AppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppConfiguration",
                "defaultValue": "{\n  timeouts: TimeoutConfig,\n  apiPaths: ApiConfigSuffix,\n  article: ArticleConfig\n}"
            },
            {
                "name": "AppProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider[]",
                "defaultValue": "[\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initConfig,\n    deps: [ConfigurationService],\n    multi: true,\n  },\n  {\n    provide: RuntimeConfiguration,\n    deps: [ConfigurationService],\n    useFactory: (service: ConfigurationService) =>\n      service.getConfig()\n  },\n  {\n    provide: AppConfiguration, useValue: AppConfig\n  },\n  {\n    provide: TimeoutConfiguration, useValue: AppConfig.timeouts\n  },\n  {\n    provide: ApiConfiguration, useValue: AppConfig.apiPaths\n  },\n  {\n    provide: ArticleHandler, useClass: ArticleService\n  },\n  {\n    provide: OperationCategoryHandler,\n    useClass: OperationCategoryService\n  },\n  {\n    provide: Logging, useClass: LoggingService\n  },\n  LayoutService\n]"
            },
            {
                "name": "ArticleConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ArticleConfiguration",
                "defaultValue": "{\n  defaultArticleId: '972d2b8a',\n  defaultListLimit: 500\n}"
            },
            {
                "name": "createdDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date('01 Jan 2013 3:40:00 GMT')"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "fitToView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/storybook.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(content: string, width = 100, height = 100): string =>\n  `\n  <div style=\"\n      width: ${width}vw;\n      height: ${height}vh;\n      border: 5px solid red;\n      box-sizing: border-box;\n      background: gray;\">\n    ${content}\n  </div>\n`"
            },
            {
                "name": "generateRandomHex",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  // TODO: hex\n  const randomNumber = Math.random() * 16777215;\n  const randomHexNumber = Math.floor(randomNumber).toString(16);\n  const randomHex = `#${randomHexNumber}`;\n  return randomHex;\n}"
            },
            {
                "name": "getAuditableEntityMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): AuditableEntity =>\n  new AuditableEntity(\n    kittyTheCatUserId,\n    kittyTheCatUserName,\n    createdDate,\n    sharkyUserId,\n    sharkyUserName,\n    lastModifiedDate\n  )"
            },
            {
                "name": "getControlError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(control: AbstractControl): string => {\n  if (!control || !control.errors || control?.errors?.length < 0) {\n    return '';\n  }\n  if (control.errors?.pattern) {\n    return 'Invalid input pattern';\n  }\n  if (control.errors?.required) {\n    return 'This field is required';\n  }\n  if (control.errors?.serverValidationError) {\n    return control.errors.serverValidationError;\n  }\n  return 'Field validation failed';\n}"
            },
            {
                "name": "getGroupName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/storybook.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(component: { name: string }, category?: Category): string => {\n    const storyName = component.name.replace('Component', '');\n    const categoryName = category ? category : Category.Others;\n    return `${categoryName}/${storyName}`;\n  }"
            },
            {
                "name": "getModuleMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => moduleMetadata({\n  declarations: [\n    OperationCategoryComponent\n  ],\n  imports: [\n    HttpClientModule,\n    BrowserAnimationsModule,\n    SharedModule\n  ],\n  providers: [\n    {\n      provide: Logging,\n      useClass: LoggingMock\n    },\n    {\n      provide: TimeoutConfiguration,\n      useValue: RuntimeConfig\n    },\n    {\n      provide: AppConfiguration,\n      useValue: AppConfig\n    },\n    {\n      provide: RuntimeConfiguration,\n      useValue: RuntimeConfig\n    },\n    {\n      provide: OperationCategoryHandler,\n      useClass: OperationCategoryServiceMock\n    }],\n})"
            },
            {
                "name": "getOperationCategoryArrayMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): AuditableOperationCategory[] => ([\n    getOperationCategoryFood(),\n    getOperationCategoryPets()\n  ])"
            },
            {
                "name": "getOperationCategoryByRequestMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(request: OperationCategoryRequest): AuditableOperationCategory => {\n\n    const id = Guid.create();\n    const operationCategory =\n      new OperationCategory(id, request.name, request.color);\n    const auditable = getAuditableEntityMock();\n    const category =\n      wrapOperationCategoryRequestMock(operationCategory, auditable);\n\n    return category;\n  }"
            },
            {
                "name": "getOperationCategoryFood",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): AuditableOperationCategory => {\n\n  const id = Guid.create();\n  const request =\n    new OperationCategory(id, 'Food', '#FF5733');\n  const category =\n    getOperationCategoryMock(request);\n\n  return category;\n}"
            },
            {
                "name": "getOperationCategoryMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(operationCategory: OperationCategory): AuditableOperationCategory => {\n\n    const auditable = getAuditableEntityMock();\n    const category =\n      wrapOperationCategoryRequestMock(operationCategory, auditable);\n\n    return category;\n  }"
            },
            {
                "name": "getOperationCategoryPets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): AuditableOperationCategory => {\n\n    const id = Guid.create();\n    const request =\n      new OperationCategory(id, 'Pets', '#6032a8');\n    const category =\n      getOperationCategoryMock(request);\n\n    return category;\n  }"
            },
            {
                "name": "initConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(appConfig: ConfigurationService) => {\n  return () => appConfig.loadConfig();\n}"
            },
            {
                "name": "inputDecimalPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(fractionalPartDigitNumber: number): string =>\n    `^(-)?([0-9]){1,9}([\\.,]([0-9]){1,${fractionalPartDigitNumber}})?`"
            },
            {
                "name": "isControlInvalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(control: AbstractControl): boolean => {\n  const isControlValid = isValid(control);\n  return !isControlValid;\n}"
            },
            {
                "name": "isValid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(control: AbstractControl) =>\n  (control != null) &&\n  (control.valid || control.dirty || control.errors == null)"
            },
            {
                "name": "kittyTheCatUserId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Guid.parse('056e4e70-2420-4fa7-9055-52791f4b6ff0')"
            },
            {
                "name": "kittyTheCatUserName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Kitty the cat'"
            },
            {
                "name": "lastModifiedDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date('02 Dec 2013 3:40:00 GMT')"
            },
            {
                "name": "mapValidatedResponseKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(object: object, key: string) => {\n  const keyLowered = key.toLowerCase();\n  Object.keys(object).find(\n    objectKey => objectKey.toLowerCase() === keyLowered\n  );\n}"
            },
            {
                "name": "parseValidationErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  errors: ValidationError[],\n  form: FormGroup,\n  formState: { [key: string]: ControlState }) => {\n\n  errors.forEach(error => {\n    const controlKey = error.propertyName;\n    const control = form.controls[controlKey];\n\n    if (control == null) {\n      return;\n    }\n\n    formState[controlKey] =\n      new ControlState(true, error.errorMessage);\n  });\n\n  form.markAllAsTouched();\n  form.markAsPristine();\n}"
            },
            {
                "name": "resetServerErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(form: FormGroup) => {\n  Object.keys(form.controls).forEach(key => {\n    form\n      .controls[key]\n      .setErrors({ serverValidationError: null });\n    form\n      .controls[key].updateValueAndValidity();\n  });\n}"
            },
            {
                "name": "RuntimeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RuntimeConfiguration",
                "defaultValue": "{\n  apiBaseUrl: '',\n  logLevel: LogLevel.All\n}"
            },
            {
                "name": "sharkyUserId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Guid.parse('59aa8074-7a31-4f75-af94-0400c6254f33')"
            },
            {
                "name": "sharkyUserName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/auditable-entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Sharky shark'"
            },
            {
                "name": "SortingOrderChangeMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<SortingOrder, SortingOrder>",
                "defaultValue": "new Map()\n    .set(SortingOrder.Default, SortingOrder.Ascendant)\n    .set(SortingOrder.Ascendant, SortingOrder.Descendant)\n    .set(SortingOrder.Descendant, SortingOrder.Default)\n    .set(SortingOrder.None, SortingOrder.None)"
            },
            {
                "name": "SortingOrderIconMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<SortingOrder, string | null>",
                "defaultValue": "new Map()\n    .set(SortingOrder.Default, 'sort')\n    .set(SortingOrder.Ascendant, 'sort-up')\n    .set(SortingOrder.Descendant, 'sort-down')\n    .set(SortingOrder.None, null)"
            },
            {
                "name": "sortNumberAscending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  numberA: number | null | undefined,\n  numberB: number | null | undefined): number => {\n\n  const delta = numberB! - numberA!;\n  if (delta > 0) {\n    return -1;\n  }\n  if (delta < 0) {\n    return 1;\n  }\n  return 0;\n}"
            },
            {
                "name": "sortNumberDescending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  numberA: number | null | undefined,\n  numberB: number | null | undefined): number => {\n\n  if (numberA == null) { return 1 }\n  if (numberB == null) { return -1 }\n\n  const delta = numberB - numberA;\n  if (delta > 0) {\n    return 1;\n  }\n  if (delta < 0) {\n    return -1;\n  }\n  return 0;\n}"
            },
            {
                "name": "sortObjectNumberField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(getProperty: (object: T) => number | null | undefined) => (\n    objectA: T,\n    objectB: T,\n    ascending: boolean) => {\n\n    const numberA = getProperty(objectA);\n    const numberB = getProperty(objectB);\n\n    if (ascending) {\n      return sortNumberAscending(numberA, numberB);\n    } else {\n      return sortNumberDescending(numberA, numberB);\n    }\n  }"
            },
            {
                "name": "sortObjectStringField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(getProperty: (object: T) => string | null | undefined) => (\n    objectA: T,\n    objectB: T,\n    ascending: boolean): number => {\n\n    const lowerA = getProperty(objectA);\n    const lowerB = getProperty(objectB);\n\n    if (ascending) {\n      return sortStringAscending(lowerA, lowerB);\n    } else {\n      return sortStringDescending(lowerA, lowerB);\n    }\n  }"
            },
            {
                "name": "sortStringAscending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  stringA: string | null | undefined,\n  stringB: string | null | undefined): number => {\n\n  if (stringA == null) { return -1 }\n  if (stringB == null) { return 1 }\n\n  const result = stringA!.localeCompare(stringB!);\n  return result;\n}"
            },
            {
                "name": "sortStringDescending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  stringA: string | null | undefined,\n  stringB: string | null | undefined): number => {\n\n  if (stringA == null) { return 1 }\n  if (stringB == null) { return -1 }\n\n  const result = stringB!.localeCompare(stringA!);\n  return result;\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation/opeartion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: args\n})"
            },
            {
                "name": "TimeoutConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TimeoutConfiguration",
                "defaultValue": "{\n  requestTimeout: 3000\n}"
            },
            {
                "name": "title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation/opeartion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getGroupName(\n  OperationComponent,\n  Category.Screens)"
            },
            {
                "name": "title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getGroupName(\n  OperationCategoryComponent,\n  Category.Screens)"
            },
            {
                "name": "updateFormState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utilities/control-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  form: FormGroup,\n  formState: { [key: string]: ControlState }) => {\n\n  Object.keys(form.controls).forEach(controlKey => {\n    const control = form.controls[controlKey];\n\n    if (control == null) {\n      return;\n    }\n\n    const isInvalid = isControlInvalid(control);\n    const error = getControlError(control);\n\n    formState[controlKey] =\n      new ControlState(isInvalid, error);\n  });\n\n  form.markAllAsTouched();\n  form.markAsPristine();\n}"
            },
            {
                "name": "wrapOperationCategoryRequestMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/operation-category.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(category: OperationCategory,\n    auditable: AuditableEntity): AuditableOperationCategory => {\n\n    return new AuditableOperationCategory(\n      auditable.ownerId,\n      auditable.owner,\n      auditable.createdDate,\n\n      category.operationCategoryId,\n      category.name,\n      category.color,\n\n      auditable.lastModifiedById,\n      auditable.lastModifiedBy,\n      auditable.lastModifiedDate\n    );\n  }"
            },
            {
                "name": "wrapToValidatedResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/responses.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\n  value: T,\n  isValid: boolean,\n  errors: ValidationError[] = []\n): ValidatedResponse<T> => ({\n  value,\n  validationResult: {\n    isValid,\n    errors\n  }\n})"
            },
            {
                "name": "wrapToValueResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/mocks/responses.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\n  success: boolean,\n  value: T,\n  message: string | null = null\n): ValueResponse<T> => ({\n  success,\n  message,\n  value\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CompareFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetProperty",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "SortObjectProperty",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/utilities/sorting.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "AccountType",
                "childs": [
                    {
                        "name": "Investments",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Savings",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "PiggyBank",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/finance/accountType.ts"
            },
            {
                "name": "AppRouts",
                "childs": [
                    {
                        "name": "Article",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "article"
                    },
                    {
                        "name": "ArticleList",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    },
                    {
                        "name": "GameOfLife",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "game"
                    },
                    {
                        "name": "Drawings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "drawings"
                    },
                    {
                        "name": "Finance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "finance"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/appRouts.ts"
            },
            {
                "name": "Category",
                "childs": [
                    {
                        "name": "Others",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Others"
                    },
                    {
                        "name": "Elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Elements"
                    },
                    {
                        "name": "Panels",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Panels"
                    },
                    {
                        "name": "Screens",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Screens"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/utilities/storybook.ts"
            },
            {
                "name": "CellStyle",
                "childs": [
                    {
                        "name": "Unknown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "Alive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alive"
                    },
                    {
                        "name": "Dead",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "grave"
                    },
                    {
                        "name": "NotBorn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/models/game-of-life/cellState.ts"
            },
            {
                "name": "GameSpeed",
                "childs": [
                    {
                        "name": "Slow",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Slow"
                    },
                    {
                        "name": "Normal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Normal"
                    },
                    {
                        "name": "Fast",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Fast"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/gameSpeed.ts"
            },
            {
                "name": "GameState",
                "childs": [
                    {
                        "name": "NotStarted",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Ongoing",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Paused",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Ended",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/models/game-of-life/gameState.ts"
            },
            {
                "name": "Icon",
                "childs": [
                    {
                        "name": "Menu",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa fa-fw fa-bars"
                    },
                    {
                        "name": "Article",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa fa-fw fa-file"
                    },
                    {
                        "name": "ArticleTable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa fa-fw fa-table"
                    },
                    {
                        "name": "GameOfLife",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa fa-fw fa-chess-board"
                    },
                    {
                        "name": "Drawings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa fa-fw fa-pen-ruler"
                    },
                    {
                        "name": "Finance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fa-solid fa-landmark"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/icons.ts"
            },
            {
                "name": "LogLevel",
                "childs": [
                    {
                        "name": "All",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "Trace",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Debug",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Information",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Fatal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    },
                    {
                        "name": "Off",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 7
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/logLevel.ts"
            },
            {
                "name": "OperationType",
                "childs": [
                    {
                        "name": "Income",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Spending",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/finance/operationType.ts"
            },
            {
                "name": "RemoteRouterState",
                "childs": [
                    {
                        "name": "Unknown",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Start",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "End",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Cancel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/remoteRouterState.ts"
            },
            {
                "name": "RepeatType",
                "childs": [
                    {
                        "name": "Daily",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Weekly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Monthly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Trimester",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Quarter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Yearly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/finance/repeatType.ts"
            },
            {
                "name": "SceneEvent",
                "childs": [
                    {
                        "name": "PointerMove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pointermove"
                    },
                    {
                        "name": "PointerOver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pointerover"
                    },
                    {
                        "name": "PointerOut",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pointerout"
                    },
                    {
                        "name": "PointerUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pointerup"
                    },
                    {
                        "name": "PointerDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pointerdown"
                    },
                    {
                        "name": "ContextMenu",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "contextmenu"
                    },
                    {
                        "name": "TouchStart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "touchstart"
                    },
                    {
                        "name": "Wheel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "wheel"
                    },
                    {
                        "name": "Zoom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zoom"
                    },
                    {
                        "name": "Click",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "click"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/scene.ts"
            },
            {
                "name": "SceneInteractionMode",
                "childs": [
                    {
                        "name": "ViewOnly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SelectActions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MoveActions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AllActions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/scene.ts"
            },
            {
                "name": "SceneSelector",
                "childs": [
                    {
                        "name": "Canvas",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "canvas"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/scene.ts"
            },
            {
                "name": "SortingOrder",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Default",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Descendant",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Ascendant",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/sortingType.ts"
            }
        ],
        "groupedVariables": {
            "src/app/features/finance/operation/opeartion.stories.ts": [
                {
                    "name": "Add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation/opeartion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation/opeartion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: args\n})"
                },
                {
                    "name": "title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation/opeartion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getGroupName(\n  OperationComponent,\n  Category.Screens)"
                }
            ],
            "src/app/features/finance/operation-category/opeartion-category.stories.ts": [
                {
                    "name": "Add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "getModuleMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => moduleMetadata({\n  declarations: [\n    OperationCategoryComponent\n  ],\n  imports: [\n    HttpClientModule,\n    BrowserAnimationsModule,\n    SharedModule\n  ],\n  providers: [\n    {\n      provide: Logging,\n      useClass: LoggingMock\n    },\n    {\n      provide: TimeoutConfiguration,\n      useValue: RuntimeConfig\n    },\n    {\n      provide: AppConfiguration,\n      useValue: AppConfig\n    },\n    {\n      provide: RuntimeConfiguration,\n      useValue: RuntimeConfig\n    },\n    {\n      provide: OperationCategoryHandler,\n      useClass: OperationCategoryServiceMock\n    }],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: args\n})"
                },
                {
                    "name": "title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getGroupName(\n  OperationCategoryComponent,\n  Category.Screens)"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "ApiConfigSuffix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiConfiguration",
                    "defaultValue": "{\n  articleUrl: '/api/list',\n  listUrl: '/api/list',\n  operationCategory: '/api/operation-category'\n}"
                },
                {
                    "name": "AppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppConfiguration",
                    "defaultValue": "{\n  timeouts: TimeoutConfig,\n  apiPaths: ApiConfigSuffix,\n  article: ArticleConfig\n}"
                },
                {
                    "name": "ArticleConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArticleConfiguration",
                    "defaultValue": "{\n  defaultArticleId: '972d2b8a',\n  defaultListLimit: 500\n}"
                },
                {
                    "name": "RuntimeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuntimeConfiguration",
                    "defaultValue": "{\n  apiBaseUrl: '',\n  logLevel: LogLevel.All\n}"
                },
                {
                    "name": "TimeoutConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeoutConfiguration",
                    "defaultValue": "{\n  requestTimeout: 3000\n}"
                }
            ],
            "src/app/app.providers.ts": [
                {
                    "name": "AppProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider[]",
                    "defaultValue": "[\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initConfig,\n    deps: [ConfigurationService],\n    multi: true,\n  },\n  {\n    provide: RuntimeConfiguration,\n    deps: [ConfigurationService],\n    useFactory: (service: ConfigurationService) =>\n      service.getConfig()\n  },\n  {\n    provide: AppConfiguration, useValue: AppConfig\n  },\n  {\n    provide: TimeoutConfiguration, useValue: AppConfig.timeouts\n  },\n  {\n    provide: ApiConfiguration, useValue: AppConfig.apiPaths\n  },\n  {\n    provide: ArticleHandler, useClass: ArticleService\n  },\n  {\n    provide: OperationCategoryHandler,\n    useClass: OperationCategoryService\n  },\n  {\n    provide: Logging, useClass: LoggingService\n  },\n  LayoutService\n]"
                },
                {
                    "name": "initConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(appConfig: ConfigurationService) => {\n  return () => appConfig.loadConfig();\n}"
                }
            ],
            "src/app/shared/mocks/auditable-entity.ts": [
                {
                    "name": "createdDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date('01 Jan 2013 3:40:00 GMT')"
                },
                {
                    "name": "getAuditableEntityMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): AuditableEntity =>\n  new AuditableEntity(\n    kittyTheCatUserId,\n    kittyTheCatUserName,\n    createdDate,\n    sharkyUserId,\n    sharkyUserName,\n    lastModifiedDate\n  )"
                },
                {
                    "name": "kittyTheCatUserId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Guid.parse('056e4e70-2420-4fa7-9055-52791f4b6ff0')"
                },
                {
                    "name": "kittyTheCatUserName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Kitty the cat'"
                },
                {
                    "name": "lastModifiedDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date('02 Dec 2013 3:40:00 GMT')"
                },
                {
                    "name": "sharkyUserId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Guid.parse('59aa8074-7a31-4f75-af94-0400c6254f33')"
                },
                {
                    "name": "sharkyUserName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/auditable-entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Sharky shark'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/utilities/storybook.ts": [
                {
                    "name": "fitToView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/storybook.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(content: string, width = 100, height = 100): string =>\n  `\n  <div style=\"\n      width: ${width}vw;\n      height: ${height}vh;\n      border: 5px solid red;\n      box-sizing: border-box;\n      background: gray;\">\n    ${content}\n  </div>\n`"
                },
                {
                    "name": "getGroupName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/storybook.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(component: { name: string }, category?: Category): string => {\n    const storyName = component.name.replace('Component', '');\n    const categoryName = category ? category : Category.Others;\n    return `${categoryName}/${storyName}`;\n  }"
                }
            ],
            "src/app/shared/utilities/color.ts": [
                {
                    "name": "generateRandomHex",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  // TODO: hex\n  const randomNumber = Math.random() * 16777215;\n  const randomHexNumber = Math.floor(randomNumber).toString(16);\n  const randomHex = `#${randomHexNumber}`;\n  return randomHex;\n}"
                }
            ],
            "src/app/shared/utilities/control-validation.ts": [
                {
                    "name": "getControlError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(control: AbstractControl): string => {\n  if (!control || !control.errors || control?.errors?.length < 0) {\n    return '';\n  }\n  if (control.errors?.pattern) {\n    return 'Invalid input pattern';\n  }\n  if (control.errors?.required) {\n    return 'This field is required';\n  }\n  if (control.errors?.serverValidationError) {\n    return control.errors.serverValidationError;\n  }\n  return 'Field validation failed';\n}"
                },
                {
                    "name": "inputDecimalPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(fractionalPartDigitNumber: number): string =>\n    `^(-)?([0-9]){1,9}([\\.,]([0-9]){1,${fractionalPartDigitNumber}})?`"
                },
                {
                    "name": "isControlInvalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(control: AbstractControl): boolean => {\n  const isControlValid = isValid(control);\n  return !isControlValid;\n}"
                },
                {
                    "name": "isValid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(control: AbstractControl) =>\n  (control != null) &&\n  (control.valid || control.dirty || control.errors == null)"
                },
                {
                    "name": "mapValidatedResponseKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(object: object, key: string) => {\n  const keyLowered = key.toLowerCase();\n  Object.keys(object).find(\n    objectKey => objectKey.toLowerCase() === keyLowered\n  );\n}"
                },
                {
                    "name": "parseValidationErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  errors: ValidationError[],\n  form: FormGroup,\n  formState: { [key: string]: ControlState }) => {\n\n  errors.forEach(error => {\n    const controlKey = error.propertyName;\n    const control = form.controls[controlKey];\n\n    if (control == null) {\n      return;\n    }\n\n    formState[controlKey] =\n      new ControlState(true, error.errorMessage);\n  });\n\n  form.markAllAsTouched();\n  form.markAsPristine();\n}"
                },
                {
                    "name": "resetServerErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(form: FormGroup) => {\n  Object.keys(form.controls).forEach(key => {\n    form\n      .controls[key]\n      .setErrors({ serverValidationError: null });\n    form\n      .controls[key].updateValueAndValidity();\n  });\n}"
                },
                {
                    "name": "updateFormState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/control-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  form: FormGroup,\n  formState: { [key: string]: ControlState }) => {\n\n  Object.keys(form.controls).forEach(controlKey => {\n    const control = form.controls[controlKey];\n\n    if (control == null) {\n      return;\n    }\n\n    const isInvalid = isControlInvalid(control);\n    const error = getControlError(control);\n\n    formState[controlKey] =\n      new ControlState(isInvalid, error);\n  });\n\n  form.markAllAsTouched();\n  form.markAsPristine();\n}"
                }
            ],
            "src/app/shared/mocks/operation-category.ts": [
                {
                    "name": "getOperationCategoryArrayMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): AuditableOperationCategory[] => ([\n    getOperationCategoryFood(),\n    getOperationCategoryPets()\n  ])"
                },
                {
                    "name": "getOperationCategoryByRequestMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(request: OperationCategoryRequest): AuditableOperationCategory => {\n\n    const id = Guid.create();\n    const operationCategory =\n      new OperationCategory(id, request.name, request.color);\n    const auditable = getAuditableEntityMock();\n    const category =\n      wrapOperationCategoryRequestMock(operationCategory, auditable);\n\n    return category;\n  }"
                },
                {
                    "name": "getOperationCategoryFood",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): AuditableOperationCategory => {\n\n  const id = Guid.create();\n  const request =\n    new OperationCategory(id, 'Food', '#FF5733');\n  const category =\n    getOperationCategoryMock(request);\n\n  return category;\n}"
                },
                {
                    "name": "getOperationCategoryMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(operationCategory: OperationCategory): AuditableOperationCategory => {\n\n    const auditable = getAuditableEntityMock();\n    const category =\n      wrapOperationCategoryRequestMock(operationCategory, auditable);\n\n    return category;\n  }"
                },
                {
                    "name": "getOperationCategoryPets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): AuditableOperationCategory => {\n\n    const id = Guid.create();\n    const request =\n      new OperationCategory(id, 'Pets', '#6032a8');\n    const category =\n      getOperationCategoryMock(request);\n\n    return category;\n  }"
                },
                {
                    "name": "wrapOperationCategoryRequestMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/operation-category.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(category: OperationCategory,\n    auditable: AuditableEntity): AuditableOperationCategory => {\n\n    return new AuditableOperationCategory(\n      auditable.ownerId,\n      auditable.owner,\n      auditable.createdDate,\n\n      category.operationCategoryId,\n      category.name,\n      category.color,\n\n      auditable.lastModifiedById,\n      auditable.lastModifiedBy,\n      auditable.lastModifiedDate\n    );\n  }"
                }
            ],
            "src/app/shared/utilities/sorting-map.ts": [
                {
                    "name": "SortingOrderChangeMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<SortingOrder, SortingOrder>",
                    "defaultValue": "new Map()\n    .set(SortingOrder.Default, SortingOrder.Ascendant)\n    .set(SortingOrder.Ascendant, SortingOrder.Descendant)\n    .set(SortingOrder.Descendant, SortingOrder.Default)\n    .set(SortingOrder.None, SortingOrder.None)"
                },
                {
                    "name": "SortingOrderIconMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<SortingOrder, string | null>",
                    "defaultValue": "new Map()\n    .set(SortingOrder.Default, 'sort')\n    .set(SortingOrder.Ascendant, 'sort-up')\n    .set(SortingOrder.Descendant, 'sort-down')\n    .set(SortingOrder.None, null)"
                }
            ],
            "src/app/shared/utilities/sorting.ts": [
                {
                    "name": "sortNumberAscending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  numberA: number | null | undefined,\n  numberB: number | null | undefined): number => {\n\n  const delta = numberB! - numberA!;\n  if (delta > 0) {\n    return -1;\n  }\n  if (delta < 0) {\n    return 1;\n  }\n  return 0;\n}"
                },
                {
                    "name": "sortNumberDescending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  numberA: number | null | undefined,\n  numberB: number | null | undefined): number => {\n\n  if (numberA == null) { return 1 }\n  if (numberB == null) { return -1 }\n\n  const delta = numberB - numberA;\n  if (delta > 0) {\n    return 1;\n  }\n  if (delta < 0) {\n    return -1;\n  }\n  return 0;\n}"
                },
                {
                    "name": "sortObjectNumberField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(getProperty: (object: T) => number | null | undefined) => (\n    objectA: T,\n    objectB: T,\n    ascending: boolean) => {\n\n    const numberA = getProperty(objectA);\n    const numberB = getProperty(objectB);\n\n    if (ascending) {\n      return sortNumberAscending(numberA, numberB);\n    } else {\n      return sortNumberDescending(numberA, numberB);\n    }\n  }"
                },
                {
                    "name": "sortObjectStringField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(getProperty: (object: T) => string | null | undefined) => (\n    objectA: T,\n    objectB: T,\n    ascending: boolean): number => {\n\n    const lowerA = getProperty(objectA);\n    const lowerB = getProperty(objectB);\n\n    if (ascending) {\n      return sortStringAscending(lowerA, lowerB);\n    } else {\n      return sortStringDescending(lowerA, lowerB);\n    }\n  }"
                },
                {
                    "name": "sortStringAscending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  stringA: string | null | undefined,\n  stringB: string | null | undefined): number => {\n\n  if (stringA == null) { return -1 }\n  if (stringB == null) { return 1 }\n\n  const result = stringA!.localeCompare(stringB!);\n  return result;\n}"
                },
                {
                    "name": "sortStringDescending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  stringA: string | null | undefined,\n  stringB: string | null | undefined): number => {\n\n  if (stringA == null) { return 1 }\n  if (stringB == null) { return -1 }\n\n  const result = stringB!.localeCompare(stringA!);\n  return result;\n}"
                }
            ],
            "src/app/shared/mocks/responses.ts": [
                {
                    "name": "wrapToValidatedResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/responses.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\n  value: T,\n  isValid: boolean,\n  errors: ValidationError[] = []\n): ValidatedResponse<T> => ({\n  value,\n  validationResult: {\n    isValid,\n    errors\n  }\n})"
                },
                {
                    "name": "wrapToValueResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/mocks/responses.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\n  success: boolean,\n  value: T,\n  message: string | null = null\n): ValueResponse<T> => ({\n  success,\n  message,\n  value\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/enums/finance/accountType.ts": [
                {
                    "name": "AccountType",
                    "childs": [
                        {
                            "name": "Investments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Savings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "PiggyBank",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/finance/accountType.ts"
                }
            ],
            "src/app/core/enums/appRouts.ts": [
                {
                    "name": "AppRouts",
                    "childs": [
                        {
                            "name": "Article",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "article"
                        },
                        {
                            "name": "ArticleList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        },
                        {
                            "name": "GameOfLife",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "game"
                        },
                        {
                            "name": "Drawings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "drawings"
                        },
                        {
                            "name": "Finance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "finance"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/appRouts.ts"
                }
            ],
            "src/app/shared/utilities/storybook.ts": [
                {
                    "name": "Category",
                    "childs": [
                        {
                            "name": "Others",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Others"
                        },
                        {
                            "name": "Elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Elements"
                        },
                        {
                            "name": "Panels",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Panels"
                        },
                        {
                            "name": "Screens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Screens"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/utilities/storybook.ts"
                }
            ],
            "src/app/core/models/game-of-life/cellState.ts": [
                {
                    "name": "CellStyle",
                    "childs": [
                        {
                            "name": "Unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "Alive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alive"
                        },
                        {
                            "name": "Dead",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "grave"
                        },
                        {
                            "name": "NotBorn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/models/game-of-life/cellState.ts"
                }
            ],
            "src/app/core/enums/gameSpeed.ts": [
                {
                    "name": "GameSpeed",
                    "childs": [
                        {
                            "name": "Slow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Slow"
                        },
                        {
                            "name": "Normal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Normal"
                        },
                        {
                            "name": "Fast",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Fast"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/gameSpeed.ts"
                }
            ],
            "src/app/core/models/game-of-life/gameState.ts": [
                {
                    "name": "GameState",
                    "childs": [
                        {
                            "name": "NotStarted",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Ongoing",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Paused",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Ended",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/models/game-of-life/gameState.ts"
                }
            ],
            "src/app/core/enums/icons.ts": [
                {
                    "name": "Icon",
                    "childs": [
                        {
                            "name": "Menu",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa fa-fw fa-bars"
                        },
                        {
                            "name": "Article",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa fa-fw fa-file"
                        },
                        {
                            "name": "ArticleTable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa fa-fw fa-table"
                        },
                        {
                            "name": "GameOfLife",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa fa-fw fa-chess-board"
                        },
                        {
                            "name": "Drawings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa fa-fw fa-pen-ruler"
                        },
                        {
                            "name": "Finance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fa-solid fa-landmark"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/icons.ts"
                }
            ],
            "src/app/core/enums/logLevel.ts": [
                {
                    "name": "LogLevel",
                    "childs": [
                        {
                            "name": "All",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "Trace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Debug",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Information",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Fatal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        },
                        {
                            "name": "Off",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 7
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/logLevel.ts"
                }
            ],
            "src/app/core/enums/finance/operationType.ts": [
                {
                    "name": "OperationType",
                    "childs": [
                        {
                            "name": "Income",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Spending",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/finance/operationType.ts"
                }
            ],
            "src/app/core/enums/remoteRouterState.ts": [
                {
                    "name": "RemoteRouterState",
                    "childs": [
                        {
                            "name": "Unknown",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Start",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "End",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Cancel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/remoteRouterState.ts"
                }
            ],
            "src/app/core/enums/finance/repeatType.ts": [
                {
                    "name": "RepeatType",
                    "childs": [
                        {
                            "name": "Daily",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Weekly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Monthly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Trimester",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Quarter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Yearly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/finance/repeatType.ts"
                }
            ],
            "src/app/core/enums/scene.ts": [
                {
                    "name": "SceneEvent",
                    "childs": [
                        {
                            "name": "PointerMove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pointermove"
                        },
                        {
                            "name": "PointerOver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pointerover"
                        },
                        {
                            "name": "PointerOut",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pointerout"
                        },
                        {
                            "name": "PointerUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pointerup"
                        },
                        {
                            "name": "PointerDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pointerdown"
                        },
                        {
                            "name": "ContextMenu",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "contextmenu"
                        },
                        {
                            "name": "TouchStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "touchstart"
                        },
                        {
                            "name": "Wheel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "wheel"
                        },
                        {
                            "name": "Zoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zoom"
                        },
                        {
                            "name": "Click",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "click"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/scene.ts"
                },
                {
                    "name": "SceneInteractionMode",
                    "childs": [
                        {
                            "name": "ViewOnly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SelectActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MoveActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AllActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/scene.ts"
                },
                {
                    "name": "SceneSelector",
                    "childs": [
                        {
                            "name": "Canvas",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "canvas"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/scene.ts"
                }
            ],
            "src/app/core/enums/sortingType.ts": [
                {
                    "name": "SortingOrder",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Default",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Descendant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Ascendant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/sortingType.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/utilities/sorting.ts": [
                {
                    "name": "CompareFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetProperty",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "SortObjectProperty",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/utilities/sorting.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ApiConfigSuffix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ArticleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RuntimeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TimeoutConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.providers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.providers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/article.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Article",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/articleList.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArticleList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/auditableEntity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuditableEntity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/baseResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/baseResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValueResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/account.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/account.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AccountRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/operation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Operation",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/operation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OperationRequest",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/operationCategory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuditableOperationCategory",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/operationCategory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OperationCategory",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/operationCategory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OperationCategoryRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/piggyBank.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PiggyBank",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/piggyBank.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PiggyBankRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/finance/repeatingOperation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RepeatingOperation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/image.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/listStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListStats",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/validatedResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidatedResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/validatedResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/backend-models/validationError.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/appConfiguration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApiConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/appConfiguration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/appConfiguration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArticleConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/appConfiguration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RuntimeConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/appConfiguration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimeoutConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/pagingData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Paging",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/pagingData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagingBase",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/pagingData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagingView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/tableData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnData",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/tableData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnDataBase",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/tableData.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnView",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/article/tableData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/controlState.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ControlState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/drawings/elements.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Offset",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/drawings/elements.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Point",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/drawings/elements.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/drawings/settings.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LineSettings",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/game-of-life/cellState.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CellState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/game-of-life/gameSettings.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GameSettings",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/identifiableEntity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IdentifiableEntity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/abstract/articleHandler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArticleHandler",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/abstract/drawingHandler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DrawingHandler",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/abstract/logging.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logging",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/abstract/operationCategoryHandler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OperationCategoryHandler",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/abstract/repositoryHandler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RepositoryHandler",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/app-configuration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigurationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/article/article.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ArticleService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/drawing/drawing.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DrawingService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/finance/operation-category.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OperationCategoryService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/game-of-life/game-of-life.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GameOfLifeService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/http-base.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpBaseService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/logging.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggingService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/resolvers/article-list-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ArticleListResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/resolvers/article-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ArticleResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/article/article.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArticleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/article/list/article-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArticleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/drawings/drawings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DrawingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/drawings/left-toolbar/left-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/drawings/right-toolbar/right-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RightToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/drawings/scene/scene.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SceneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/account/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/finance-dashboard/finance-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FinanceDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getModuleMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/opeartion-category.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation-category/operation-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OperationCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation/opeartion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation/opeartion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation/opeartion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/finance/operation/operation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OperationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/game-of-life/game-of-life.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameOfLifeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/default-content/default-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createdDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuditableEntityMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kittyTheCatUserId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kittyTheCatUserName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lastModifiedDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sharkyUserId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/auditable-entity.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sharkyUserName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOperationCategoryArrayMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOperationCategoryByRequestMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOperationCategoryFood",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOperationCategoryMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOperationCategoryPets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/operation-category.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "wrapOperationCategoryRequestMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/responses.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "wrapToValidatedResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/responses.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "wrapToValueResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/services/logging.mock.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggingMock",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/services/operation-category.mock.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OperationCategoryServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/paging/paging.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/get-page.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetPagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/remove-empty-entries.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RemoveEmptyEntriesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/text-fragment.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FirstParagraphPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/url-as-background-image.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "UrlAsBackgroundImagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/remote-state-wrapper/remote-state-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoteStateWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateRandomHex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getControlError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputDecimalPattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isControlInvalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isValid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapValidatedResponseKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetServerErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/control-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateFormState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SortingOrderChangeMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SortingOrderIconMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortNumberAscending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortNumberDescending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortObjectNumberField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortObjectStringField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortStringAscending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/sorting.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortStringDescending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/storybook.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fitToView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utilities/storybook.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGroupName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}