map $http_upgrade $connection_upgrade {
  default Upgrade;
  ''      close;
}

# Disables cache only for HTML pages to make sure the latest version is used.
# Other type of files (.css, .js) are referenced from HTML page and should have
# hashes in file names added at frontend build time. This way cache will be
# skipped for the first page load (since file names will be different) and all
# files besides HTML will be cached properly for subsequent page reloads.
map $sent_http_content_type $disable_cache_for_html_files {
  default   '';
  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#preventing_caching
  text/html 'no-store, max-age=0';
}

server {
  # Use `/etc/resolv.conf`
  # For more information, visit:
  # https://github.com/openresty/openresty/#resolvconf-parsing
  resolver local=on valid=15s;

  listen 80;
  sendfile on;
  default_type application/octet-stream;

  gzip on;
  gzip_http_version 1.1;
  gzip_disable      'MSIE [1-6]\.';
  gzip_min_length   1100;
  gzip_vary         on;
  gzip_proxied      expired no-cache no-store private auth;
  gzip_types        text/plain text/css
                    application/json
                    application/javascript
                    application/x-javascript
                    text/xml application/xml
                    application/xml+rss
                    text/javascript;
  gzip_comp_level   9;

  # Proxy buffer size needs to be larger for MSAL token
  # TODO: these numbers may be too much, possibly can be reduced
  proxy_buffers 4 256k;
  proxy_buffer_size 128k;
  proxy_busy_buffers_size 256k;

  # Limits maximum file upload size. Default value is 1M.
  client_max_body_size 400M;

  # Redirect everything that doesn't match another location to root path,
  # otherwise MSAL redirection will not work.
  location / {
    return 301 /${BASE_URL};
  }

  # Serve static files (HTML, CSS, JS)
  location /${BASE_URL} {
    # Using `alias` insead of `root` directive, so ${ROOT_PATH}
    # will be discarded and static file will be fetched straight
    # from the specified folder
    alias /usr/share/nginx/html;
    try_files $uri $uri/ /index.html =404;
    add_header Cache-Control $disable_cache_for_html_files;
  }

  # Re-route auth calls to authorization service
  location  ~ ^/(${BASE_URL}/api/auth)/(.*) {
    proxy_pass ${AUTH_URL}/$1/$2$is_args$args;
  }
  # Re-route auth calls to storage service
  location  ~ ^/(${BASE_URL}/api/storage)/(.*) {
    proxy_pass ${STORAGE_API_URL}/$1/$2$is_args$args;
  }

  # Re-route API calls to backend
  location  ~ ^/(${BASE_URL}/api)/(.*) {
    proxy_pass ${API_URL}/$1/$2$is_args$args;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_send_timeout 600;
    proxy_connect_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;
  }

}
